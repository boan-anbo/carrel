syntax = "proto3";


package carrel.core.project_manager.v1;

import 'carrel/common/project/v2/project_v2.proto';


enum CarrelDbType {
    // sqlite default
    CARREL_DB_TYPE_UNSPECIFIED = 0;
    // sqlite
    CARREL_DB_TYPE_SQLITE = 1;
    // postgresql
    CARREL_DB_TYPE_POSTGRESQL = 2;

}

// message to add new archive to a project
message AddArchiveDto {
    // the name of the archive
  string name = 1;
  // describe the purpose of the archive
  string description = 2;
  // the source of the archive, could be empty, if used, it's usually a synced folder or a Zotero collection etc.
  string source_url = 3;
  // the type of the source url, could be Directory, Zotero, etc.
  ArchiveSourceType archive_source_type = 4;
  // the id of the project that the new archive will be associated with
  int32 project_id = 5;
}

//  the message to create a new project
message CreateProjectRequest {
  // the name of the project
  string name = 1;
  // the description of the project
  string description = 2;
  // project folder
    string directory = 3;
    // Carrel db name
    string db_name = 4;
    // To db name
    string to_name = 5;
}

// enum ArchiveSourceType
enum ArchiveSourceType {
    ARCHIVE_SOURCE_TYPE_UNSPECIFIED = 0;
    ARCHIVE_SOURCE_TYPE_DIRECTORY = 1;
    ARCHIVE_SOURCE_TYPE_ZOTERO = 2;
}

// Metadata of a project for the app.
message ProjectInfo {
  // the id of the project in the CarrelApp database
  // This is NOT the id of the project in individual folders, where the project id is always 1.
  int32 app_project_id = 1;
  // uuid
  string uuid = 2;

  // the name of the project
  string name = 3;
  // the description of the project
  string description = 4;
  // project folder
  string directory = 5;
  // Carrel db name
  string db_name = 6;
  // To db name
  string to_name = 7;
  // Carrel db type
  CarrelDbType db_type = 8;
  // archive count
  int32 archive_count = 9;
  // file count
  int32 file_count = 10;

  repeated carrel.common.project.v2.Project project = 12;
}



message Task {
  int32 id = 1;
  // this is a string identifier, like "import", "export", "sync", etc.
  // This should come from enum string options to enforce uniformity.
  // An identifier can allow or disallow multiple tasks to run at the same time by setting `allow_multiple`` to true or false.
  string identifier = 2;
  string uuid = 3;
  // describe what the task does
  string description = 4;
  TaskState state = 5;
  string created_at = 6;
  string updated_at = 7;
  int32 progress = 8;
  int32 allow_multiple = 9;
  // the last message the task left
  string last_message = 10;
  // who commisioned the task
  string commissioner = 11;
}

enum TaskState {
  TASK_STATE_UNSPECIFIED = 0;
  TASK_STATE_CREATED = 1;
  TASK_STATE_RUNNING = 2;
  TASK_STATE_FINISHED = 3;
  TASK_STATE_FAILED = 4;
  TASK_STATE_PAUSED = 5;
}