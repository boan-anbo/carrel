syntax = "proto3";


package carrel.server.project_manager.v1;


import "carrel/core/project_manager/v1/project_manager_v1.proto";
import "carrel/common/file/v1/file_v1.proto";

import "carrel/common/archive/v1/archive_v1.proto";

import "carrel/common/firefly/v2/firefly_v2.proto";

import "generic/api/query/v1/query_v1.proto";

import "carrel/common/project/v2/project_v2.proto";
import "carrel/common/tag/v2/tag_v2.proto";

// services
service ProjectManagerService {
  // open project, return empty response if success
  rpc OpenProject (OpenProjectRequest) returns (OpenProjectResponse) {}

  // get project information
  // add archive
  rpc AddArchive (AddArchiveRequest) returns (AddArchiveResponse) {}

  // list all files
  rpc GetArchiveFiles (GetArchiveFilesRequest) returns (GetArchiveFilesResponse) {}

  // add file paths to project archive
  rpc AddFilesToArchive (AddFilesToArchiveRequest) returns (AddFilesToArchiveResponse) {}
  // add all files under directory to project archive
  rpc AddDirectoryToArchive (AddDirectoryToArchiveRequest) returns (AddDirectoryToArchiveResponse) {}

  // remove file paths from project archive
  rpc RemoveFilesFromArchive (RemoveFilesFromArchiveRequest) returns (RemoveFilesFromArchiveResponse) {}

  rpc ListAllProjectArchives (ListAllProjectArchivesRequest) returns (ListAllProjectArchivesResponse) {}

  // List all files stored in the archive with the given ID.
  rpc ListFilesInArchive (ListFilesInArchiveRequest) returns (ListFilesInArchiveResponse) {}

  rpc SyncProjectArchives (SyncProjectArchivesRequest) returns (SyncProjectArchivesResponse) {}

  rpc ListAllProjectFiles (ListAllProjectFilesRequest) returns (ListAllProjectFilesResponse) {}

  // fireflies
  rpc ListAllProjectFireflies (ListAllProjectFirefliesRequest) returns (ListAllProjectFirefliesResponse) {}

  // generic queries
  rpc QueryFiles (QueryFilesRequest) returns (QueryFilesResponse) {}

  // query fireflies
  rpc QueryFireflies (QueryFirefliesRequest) returns (QueryFirefliesResponse) {}

  // list most recent projects
  rpc ListRecentProjects (ListRecentProjectsRequest) returns (ListRecentProjectsResponse) {}

  // list all tag groups
  rpc ListAllTagGroups (ListAllTagGroupsRequest) returns (ListAllTagGroupsResponse) {}

  // list all fireflies by tag key and value
  rpc ListFirefliesByTag (ListFirefliesByTagRequest) returns (ListFirefliesByTagResponse) {}

}

// message to open a project
message OpenProjectRequest {
  // the id of the project
  string project_directory = 1;
  // app
  string app_directory = 2;
}

// message to open a project
message OpenProjectResponse {
  string app_directory = 2;
  string project_directory = 3;
  carrel.core.project_manager.v1.ProjectInfo project_info = 4;
}

// message to get project information
message GetProjectInfoRequest {
  // the id of the project
  int32 project_id = 1;
}

// message to get project information
message GetProjectInfoResponse {
  // the id of the project
  carrel.core.project_manager.v1.ProjectInfo project_info = 1;
}

// message to add archive
message AddArchiveRequest {
  // the folder of the project
  string project_directory = 1;
  // the id of the project
  int32 project_id = 2;
  carrel.core.project_manager.v1.AddArchiveDto add_archive_dto = 3;
}

// message to add archive
message AddArchiveResponse {
  // the folder of the archive
  string project_directory = 1;
  // db file name
  string db_file_name = 2;
  // the id of the project
  int32 project_id = 3;
// the id of the archive
  int32 archive_id = 4;
}

// message to get archive files
message GetArchiveFilesRequest {
  // the folder of the project
  string project_directory = 1;
  // the id of the project
  int32 project_id = 2;
  // the id of the archive
  int32 archive_id = 3;
}

// message to get archive files
message GetArchiveFilesResponse {
  // the folder of the project
  string project_directory = 1;
  // the id of the project
  int32 project_id = 2;
  // the id of the archive
  int32 archive_id = 3;
  // the list of files
  repeated carrel.common.file.v1.File files = 4;
}


// message to add files to archive
message AddFilesToArchiveRequest {
  // the folder of the project
  string project_directory = 1;
  // the id of the archive
  int32 archive_id = 3;
  // the list of files
  repeated string file_paths = 4;
}

// message to add files to archive
message AddFilesToArchiveResponse {
  // the folder of the project
  string project_directory = 1;
  // the id of the project
  int32 project_id = 2;
  // the id of the archive
  int32 archive_id = 3;
  // the list of files
  repeated carrel.common.file.v1.File files = 4;
}


// message to add folder files to archive
message AddDirectoryToArchiveRequest {
  // the folder of the project
  string project_directory = 1;
  // the id of the archive
  int32 archive_id = 3;
  // the list of files
  string source_directory = 4;
}

// message to add folder files to archive
message AddDirectoryToArchiveResponse {
  // the folder of the project
  string project_directory = 1;
  // the id of the archive
  int32 archive_id = 3;
  // the list of files
  repeated carrel.common.file.v1.File files = 4;
}




// message to remove files from archive
message RemoveFilesFromArchiveRequest {
  // the folder of the project
  string project_directory = 1;
  // the id of the project
  int32 project_id = 2;
  // the id of the archive
  int32 archive_id = 3;
  // the list of files
  repeated string file_uuids = 4;
}

// message to remove files from archive
message RemoveFilesFromArchiveResponse {
  // the folder of the project
  string project_directory = 1;
  // the id of the project
  int32 project_id = 2;
  // the id of the archive
  int32 archive_id = 3;
  int64 affected_rows = 4;
  // bool when affected rows is 0
  bool is_affacted_rows_zero = 5;
}



// message to list all project archives
message ListAllProjectArchivesRequest {
  // the folder of the project
  string project_directory = 1;
}

// message to list all project archives
message ListAllProjectArchivesResponse {

  string project_directory = 1;
  // the folder of the project
  repeated carrel.common.archive.v1.Archive archives = 3;
  // the list of archives
}

// message to list files in archive
message ListFilesInArchiveRequest {
  // the folder of the project
  string project_directory = 1;
  // the id of the archive
  int32 archive_id = 2;
}

// message to list files in archive
message ListFilesInArchiveResponse {
  // the folder of the project
  string project_directory = 1;
  // the id of the archive
  int32 archive_id = 2;
  // the list of files
  repeated carrel.common.file.v1.File files = 3;
}

// message to sync archive
message SyncProjectArchivesRequest {
  // the folder of the project
  string project_directory = 1;
  // the id of the archive
  int32 archive_id = 2;
}

// message to sync archive
message SyncProjectArchivesResponse {
  // the folder of the project
  string project_directory = 1;
  // the id of the archive
  repeated carrel.common.file.v1.File synced_files = 3;

  repeated carrel.common.firefly.v2.Firefly new_fireflies = 4;
}


// message to list all project files
message ListAllProjectFilesRequest {
  // the folder of the project
  string project_directory = 1;
}

// message to list all project files
message ListAllProjectFilesResponse {
  // the folder of the project
  string project_directory = 1;
  // the list of files
  repeated carrel.common.file.v1.File files = 3;
}


// message to list all project fireflies
message ListAllProjectFirefliesRequest {
  // the folder of the project
  string project_directory = 1;
}

// message to list all project fireflies
message ListAllProjectFirefliesResponse {
  // the folder of the project
  string project_directory = 1;
  // the list of fireflies
  repeated carrel.common.firefly.v2.Firefly fireflies = 3;
  // count
  uint64 count = 4;
}

// message to query files
message QueryFilesRequest {
  // the folder of the project
  string project_directory = 1;
  // the query
  generic.api.query.v1.StandardQuery query = 2;
  // whether use mock data
  bool is_mock = 3;
}

// message that replies to query files request
message QueryFilesResponse {
  // the folder of the project
  string project_directory = 1;
  // the list of files
  repeated carrel.common.file.v1.File files = 3;
  generic.api.query.v1.StandardQueryResultMetadata response_metadata = 4;
}

// message to query fireflies
message QueryFirefliesRequest {
  // the folder of the project
  string project_directory = 1;
  // the query
  generic.api.query.v1.StandardQuery query = 2;
  // whether use mock data
  bool is_mock = 3;
}

// message that replies to query fireflies request
message QueryFirefliesResponse {
  // the folder of the project
  string project_directory = 1;
  // the list of fireflies
  repeated carrel.common.firefly.v2.Firefly fireflies = 3;
  generic.api.query.v1.StandardQueryResultMetadata response_metadata = 4;
}


// list more recent project request
message ListRecentProjectsRequest {
  // app directory
  string app_directory = 1;
  // number of projects
  int32 number_of_projects = 2;

}

// list more recent project response
message ListRecentProjectsResponse {

  repeated carrel.common.project.v2.Project projects = 1;

  string app_directory = 3;

}

// list all tag groups
message ListAllTagGroupsRequest {
  // the folder of the project
  string project_directory = 1;
}

// list all tag groups
message ListAllTagGroupsResponse {
  // the folder of the project
  string project_directory = 1;
  // the list of tag groups
  repeated carrel.common.tag.v2.TagGroup tag_groups = 2;
  // tag_group count
  int32 tag_group_count = 3;
}

// list tags by tag key and value
message ListFirefliesByTagRequest {
  // the folder of the project
  string project_directory = 1;
  // the tag key
  string key = 2;
  // the tag value
  optional string value = 3;
  // the tag note
  optional string note = 4;
}

// list tags by tag key and value
message ListFirefliesByTagResponse {
  // the folder of the project
  string project_directory = 1;
  // the list of tags
  repeated carrel.common.firefly.v2.Firefly fireflies = 2;
  // tag count
  generic.api.query.v1.StandardQueryResultMetadata response_metadata = 4;
}
