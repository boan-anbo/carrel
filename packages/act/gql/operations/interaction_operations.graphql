# Query
query GetInteractions {
  interactions {
    edges {
      cursor
      node {
        id
        label
      }
    }
    nodes {
      ...interactionFragment
    }
    totalCount
    ...pageInforFragment
  }
}



query FilterInteractionsByLabel($labelFilter: String!) {
  interactions(where: { label: { contains: $labelFilter } }) {
    nodes {
      ...interactionFragment
    }
  }
}

query GetFullInteraction($id: Int!) {
  interaction(id: $id) {
    ...interactionResultFragment
  }
}

# Delete
mutation DeleteInteraction($id: Int!) {
  deleteInteraction(id: $id)
}

# Add new entity
mutation AddNewInteractionEntity($label: String!) {
  addNewEntityInteraction(label: $label) {
    ...interactionFragment
  }
}

# Add interaction.
mutation AddInteraction($request: CreateOrUpdateInteractionRequestDtoInput!) {
  createOrUpdateInteraction(requestDto: $request) {

    ...interactionFragment
  }
}


fragment interactionFragment on Interaction {
  id,
  label,
  ...actsFragment,
  identity,
  subjects {
    ...subjectFragment
  }
  objects {
    ...objectFragment
  }
  parallels {
    ...parallelFragment
  },

  settings {
    ...settingFragment
  }
  indirectObjects {
    ...indirectObjectFragment
  }
  references {
    ...referenceFragment
  }
  contexts {
    ...contextFragment
  }
  purposes {
    ...purposeFragment
  }
}


fragment subjectFragment on SubjectRelation {
  hostInteractionId
  type
  uuid
  description
  label
  weight
  linkedInteraction {
    ...MinimalInteractionFragment
  }
  linkedInteractionId
}

fragment objectFragment on ObjectRelation {
  hostInteractionId
  type
  uuid
  description
  label
  weight
  linkedInteraction {
    ...MinimalInteractionFragment
  }
  linkedInteractionId
}

fragment parallelFragment on ParallelRelation {
  hostInteractionId
  type
  uuid
  description
  label
  weight
  linkedInteraction {
    ...MinimalInteractionFragment
  }
  linkedInteractionId
}

fragment settingFragment on SettingRelation {
  hostInteractionId
  type
  uuid
  description
  label
  weight
  linkedInteraction {
    ...MinimalInteractionFragment
  }
  linkedInteractionId
}

fragment contextFragment on ContextRelation {
  hostInteractionId
  type
  uuid
  description
  label
  weight
  linkedInteraction {
    ...MinimalInteractionFragment
  }
  linkedInteractionId
}

fragment purposeFragment on PurposeRelation {
  hostInteractionId
  type
  uuid
  description
  label
  weight
  linkedInteraction {
    ...MinimalInteractionFragment
  }
  linkedInteractionId
}

fragment referenceFragment on ReferenceRelation {
  hostInteractionId
  type
  uuid
  description
  label
  weight
  linkedInteraction {
    ...MinimalInteractionFragment
  }
  linkedInteractionId
}

fragment indirectObjectFragment on IndirectObjectRelation {

  type
  uuid
  description
  label
  weight
  hostInteractionId
  linkedInteraction {
    ...MinimalInteractionFragment
  }
  linkedInteractionId
}


fragment MinimalInteractionFragment on Interaction {
  id
  uuid
  label
}


# Fragments
fragment actsFragment on Interaction {
  firstAct  {
    ...firstActFragment
  },
  secondAct {
    ...secondActFragment
  },
}
fragment firstActFragment on FirstAct {
  id,
  guid,
  label,
  description,
}
fragment secondActFragment on SecondAct {
  id,
  guid,
  label,
  description,
}


fragment pageInforFragment on InteractionsConnection {
  pageInfo {
    hasNextPage

    hasPreviousPage

    startCursor

    endCursor
  }
}

fragment interactionResultFragment on InteractionResult {
  interaction {
    ...interactionFragment
  }
  graph {
    ...graphFragment
  }
}

fragment graphFragment on GraphOfRelationAndInteraction {
  uuid
  nodes {
    ...nodeFragment
  }
  edges {
    ...edgeFragment
  }
}

fragment nodeFragment on NodeOfInteraction {
  id
  uuid
  label
  description
  content
  data {
    ...interactionFragment
  }
}

fragment edgeFragment on EdgeOfRelation {
  id
  uuid
  label
  description
  content
  weight
  data {
    ...relationFragment
  }
  sourceId
  targetId
}

