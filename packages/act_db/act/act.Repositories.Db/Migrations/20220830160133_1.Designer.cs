// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using act.Repositories.Db;

#nullable disable

namespace act.Repositories.Db.Migrations
{
    [DbContext(typeof(ActDbContext))]
    [Migration("20220830160133_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("act.Services.Model.Interaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("End")
                        .HasColumnType("TEXT");

                    b.Property<int>("Identity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Interactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            End = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Identity = 0,
                            Label = "World",
                            Start = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("act.Services.Model.InteractionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("InteractionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Guid = new Guid("caad93de-176f-4bba-bc76-f46294c80d30"),
                            Label = "to be"
                        });
                });

            modelBuilder.Entity("act.Services.Model.ObjectRelation", b =>
                {
                    b.Property<int>("HostInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LinkedInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("HostInteractionId", "LinkedInteractionId");

                    b.HasIndex("LinkedInteractionId");

                    b.ToTable("ObjectRelations");
                });

            modelBuilder.Entity("act.Services.Model.ParallelRelation", b =>
                {
                    b.Property<int>("HostInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LinkedInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("HostInteractionId", "LinkedInteractionId");

                    b.HasIndex("LinkedInteractionId");

                    b.ToTable("ParallelRelations");
                });

            modelBuilder.Entity("act.Services.Model.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<int>("InteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InteractionId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("act.Services.Model.SubjectRelation", b =>
                {
                    b.Property<int>("HostInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LinkedInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("HostInteractionId", "LinkedInteractionId");

                    b.HasIndex("LinkedInteractionId");

                    b.ToTable("SubjectRelations");
                });

            modelBuilder.Entity("act.Services.Model.Interaction", b =>
                {
                    b.HasOne("act.Services.Model.InteractionType", "Type")
                        .WithMany("Interactions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("act.Services.Model.ObjectRelation", b =>
                {
                    b.HasOne("act.Services.Model.Interaction", "HostInteraction")
                        .WithMany("Objects")
                        .HasForeignKey("HostInteractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("act.Services.Model.Interaction", "LinkedInteraction")
                        .WithMany()
                        .HasForeignKey("LinkedInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostInteraction");

                    b.Navigation("LinkedInteraction");
                });

            modelBuilder.Entity("act.Services.Model.ParallelRelation", b =>
                {
                    b.HasOne("act.Services.Model.Interaction", "HostInteraction")
                        .WithMany("Related")
                        .HasForeignKey("HostInteractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("act.Services.Model.Interaction", "LinkedInteraction")
                        .WithMany()
                        .HasForeignKey("LinkedInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostInteraction");

                    b.Navigation("LinkedInteraction");
                });

            modelBuilder.Entity("act.Services.Model.Property", b =>
                {
                    b.HasOne("act.Services.Model.Interaction", "Interaction")
                        .WithMany("Properties")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Interaction");
                });

            modelBuilder.Entity("act.Services.Model.SubjectRelation", b =>
                {
                    b.HasOne("act.Services.Model.Interaction", "HostInteraction")
                        .WithMany("Subjects")
                        .HasForeignKey("HostInteractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("act.Services.Model.Interaction", "LinkedInteraction")
                        .WithMany()
                        .HasForeignKey("LinkedInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostInteraction");

                    b.Navigation("LinkedInteraction");
                });

            modelBuilder.Entity("act.Services.Model.Interaction", b =>
                {
                    b.Navigation("Objects");

                    b.Navigation("Properties");

                    b.Navigation("Related");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("act.Services.Model.InteractionType", b =>
                {
                    b.Navigation("Interactions");
                });
#pragma warning restore 612, 618
        }
    }
}
