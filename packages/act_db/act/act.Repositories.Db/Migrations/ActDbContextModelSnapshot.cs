// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using act.Repositories.Db;

#nullable disable

namespace act.Repositories.Db.Migrations
{
    [DbContext(typeof(ActDbContext))]
    partial class ActDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("act.Services.Model.ContextRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<int>("LinkedInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HostInteractionId");

                    b.HasIndex("LinkedInteractionId");

                    b.ToTable("ContextRelations");
                });

            modelBuilder.Entity("act.Services.Model.FirstAct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FirstActs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "",
                            Description = "",
                            Guid = new Guid("e8a0bd10-60e0-4d43-b67c-cbd2677eda3e"),
                            Label = "to be"
                        });
                });

            modelBuilder.Entity("act.Services.Model.IndirectObjectRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<int>("LinkedInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HostInteractionId");

                    b.HasIndex("LinkedInteractionId");

                    b.ToTable("IndirectObjectRelations");
                });

            modelBuilder.Entity("act.Services.Model.Interaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("End")
                        .HasColumnType("TEXT");

                    b.Property<int>("FirstActId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Identity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SecondActId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FirstActId");

                    b.HasIndex("SecondActId");

                    b.ToTable("Interactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "",
                            Description = "",
                            End = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstActId = 1,
                            Identity = 0,
                            Label = "World",
                            Start = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uuid = new Guid("3415e73c-b09a-4bec-899e-b67cfa09b6f9")
                        },
                        new
                        {
                            Id = 2,
                            Content = "",
                            Description = "",
                            End = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstActId = 1,
                            Identity = 0,
                            Label = "People",
                            Start = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uuid = new Guid("77c89f02-7337-4f46-8696-41296af09164")
                        },
                        new
                        {
                            Id = 3,
                            Content = "",
                            Description = "",
                            End = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstActId = 1,
                            Identity = 0,
                            Label = "Idea",
                            Start = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uuid = new Guid("1431edd8-3e85-41b9-b817-e805b3ada850")
                        },
                        new
                        {
                            Id = 4,
                            Content = "",
                            Description = "",
                            End = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstActId = 1,
                            Identity = 1,
                            Label = "Creation",
                            Start = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uuid = new Guid("0c39620e-0bb2-4a3f-bef0-84b24b09c253")
                        });
                });

            modelBuilder.Entity("act.Services.Model.ObjectRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<int>("LinkedInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HostInteractionId");

                    b.HasIndex("LinkedInteractionId");

                    b.ToTable("ObjectRelations");
                });

            modelBuilder.Entity("act.Services.Model.ParallelRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<int>("LinkedInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HostInteractionId");

                    b.HasIndex("LinkedInteractionId");

                    b.ToTable("ParallelRelations");
                });

            modelBuilder.Entity("act.Services.Model.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<int>("InteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InteractionId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("act.Services.Model.PurposeRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<int>("LinkedInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HostInteractionId");

                    b.HasIndex("LinkedInteractionId");

                    b.ToTable("PurposeRelations");
                });

            modelBuilder.Entity("act.Services.Model.ReferenceRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<int>("LinkedInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HostInteractionId");

                    b.HasIndex("LinkedInteractionId");

                    b.ToTable("ReferenceRelations");
                });

            modelBuilder.Entity("act.Services.Model.SecondAct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SecondActs");
                });

            modelBuilder.Entity("act.Services.Model.SettingRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<int>("LinkedInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HostInteractionId");

                    b.HasIndex("LinkedInteractionId");

                    b.ToTable("SettingRelations");
                });

            modelBuilder.Entity("act.Services.Model.SubjectRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<int>("LinkedInteractionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HostInteractionId");

                    b.HasIndex("LinkedInteractionId");

                    b.ToTable("SubjectRelations");
                });

            modelBuilder.Entity("act.Services.Model.ContextRelation", b =>
                {
                    b.HasOne("act.Services.Model.Interaction", "HostInteraction")
                        .WithMany("Contexts")
                        .HasForeignKey("HostInteractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("act.Services.Model.Interaction", "LinkedInteraction")
                        .WithMany()
                        .HasForeignKey("LinkedInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostInteraction");

                    b.Navigation("LinkedInteraction");
                });

            modelBuilder.Entity("act.Services.Model.IndirectObjectRelation", b =>
                {
                    b.HasOne("act.Services.Model.Interaction", "HostInteraction")
                        .WithMany("IndirectObjects")
                        .HasForeignKey("HostInteractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("act.Services.Model.Interaction", "LinkedInteraction")
                        .WithMany()
                        .HasForeignKey("LinkedInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostInteraction");

                    b.Navigation("LinkedInteraction");
                });

            modelBuilder.Entity("act.Services.Model.Interaction", b =>
                {
                    b.HasOne("act.Services.Model.FirstAct", "FirstAct")
                        .WithMany("Interactions")
                        .HasForeignKey("FirstActId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("act.Services.Model.SecondAct", "SecondAct")
                        .WithMany("Interactions")
                        .HasForeignKey("SecondActId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FirstAct");

                    b.Navigation("SecondAct");
                });

            modelBuilder.Entity("act.Services.Model.ObjectRelation", b =>
                {
                    b.HasOne("act.Services.Model.Interaction", "HostInteraction")
                        .WithMany("Objects")
                        .HasForeignKey("HostInteractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("act.Services.Model.Interaction", "LinkedInteraction")
                        .WithMany()
                        .HasForeignKey("LinkedInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostInteraction");

                    b.Navigation("LinkedInteraction");
                });

            modelBuilder.Entity("act.Services.Model.ParallelRelation", b =>
                {
                    b.HasOne("act.Services.Model.Interaction", "HostInteraction")
                        .WithMany("Parallels")
                        .HasForeignKey("HostInteractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("act.Services.Model.Interaction", "LinkedInteraction")
                        .WithMany()
                        .HasForeignKey("LinkedInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostInteraction");

                    b.Navigation("LinkedInteraction");
                });

            modelBuilder.Entity("act.Services.Model.Property", b =>
                {
                    b.HasOne("act.Services.Model.Interaction", "Interaction")
                        .WithMany("Properties")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Interaction");
                });

            modelBuilder.Entity("act.Services.Model.PurposeRelation", b =>
                {
                    b.HasOne("act.Services.Model.Interaction", "HostInteraction")
                        .WithMany("Purposes")
                        .HasForeignKey("HostInteractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("act.Services.Model.Interaction", "LinkedInteraction")
                        .WithMany()
                        .HasForeignKey("LinkedInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostInteraction");

                    b.Navigation("LinkedInteraction");
                });

            modelBuilder.Entity("act.Services.Model.ReferenceRelation", b =>
                {
                    b.HasOne("act.Services.Model.Interaction", "HostInteraction")
                        .WithMany("References")
                        .HasForeignKey("HostInteractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("act.Services.Model.Interaction", "LinkedInteraction")
                        .WithMany()
                        .HasForeignKey("LinkedInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostInteraction");

                    b.Navigation("LinkedInteraction");
                });

            modelBuilder.Entity("act.Services.Model.SettingRelation", b =>
                {
                    b.HasOne("act.Services.Model.Interaction", "HostInteraction")
                        .WithMany("Settings")
                        .HasForeignKey("HostInteractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("act.Services.Model.Interaction", "LinkedInteraction")
                        .WithMany()
                        .HasForeignKey("LinkedInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostInteraction");

                    b.Navigation("LinkedInteraction");
                });

            modelBuilder.Entity("act.Services.Model.SubjectRelation", b =>
                {
                    b.HasOne("act.Services.Model.Interaction", "HostInteraction")
                        .WithMany("Subjects")
                        .HasForeignKey("HostInteractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("act.Services.Model.Interaction", "LinkedInteraction")
                        .WithMany()
                        .HasForeignKey("LinkedInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostInteraction");

                    b.Navigation("LinkedInteraction");
                });

            modelBuilder.Entity("act.Services.Model.FirstAct", b =>
                {
                    b.Navigation("Interactions");
                });

            modelBuilder.Entity("act.Services.Model.Interaction", b =>
                {
                    b.Navigation("Contexts");

                    b.Navigation("IndirectObjects");

                    b.Navigation("Objects");

                    b.Navigation("Parallels");

                    b.Navigation("Properties");

                    b.Navigation("Purposes");

                    b.Navigation("References");

                    b.Navigation("Settings");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("act.Services.Model.SecondAct", b =>
                {
                    b.Navigation("Interactions");
                });
#pragma warning restore 612, 618
        }
    }
}
