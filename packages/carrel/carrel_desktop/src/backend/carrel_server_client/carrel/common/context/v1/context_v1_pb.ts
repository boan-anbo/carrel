// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file carrel/common/context/v1/context_v1.proto (package carrel.common.context.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message carrel.common.context.v1.Context
 */
export class Context extends Message<Context> {
  /**
   * the context string
   *
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * // the beginning column of the snippet in context
   *
   * @generated from field: int32 snippet_in_context_column_number = 2;
   */
  snippetInContextColumnNumber = 0;

  /**
   * the snippet string
   *
   * @generated from field: string snippet_string = 3;
   */
  snippetString = "";

  constructor(data?: PartialMessage<Context>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.common.context.v1.Context";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "snippet_in_context_column_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "snippet_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Context {
    return new Context().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Context {
    return new Context().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Context {
    return new Context().fromJsonString(jsonString, options);
  }

  static equals(a: Context | PlainMessage<Context> | undefined, b: Context | PlainMessage<Context> | undefined): boolean {
    return proto3.util.equals(Context, a, b);
  }
}

