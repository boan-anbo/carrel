// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file carrel/common/firefly/v2/firefly_v2.proto (package carrel.common.firefly.v2, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

// context
// A key unit of extracted useful information from a document.
// Compared to Passage, a card is annotated with a selection of key text, and even comments and importance.
// V2: completely flatten the structure, using single fields.

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import {Importance} from "../../importance/v1/importance_v1_pb.js";
import {Tag} from "../../tag/v2/tag_v2_pb.js";

/**
 * @generated from message carrel.common.firefly.v2.Firefly
 */
export class Firefly extends Message<Firefly> {
  /**
   * uuid, the same as the TO uuid.
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * meta description
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * main content, such as a highlighted sentence
   *
   * @generated from field: string light = 4;
   */
  light = "";

  /**
   * main context, usually the relevant part, such as a paragraph
   *
   * @generated from field: string context = 5;
   */
  context = "";

  /**
   * full text, such as the whole document, full text of the article etc
   *
   * @generated from field: string full_text = 6;
   */
  fullText = "";

  /**
   * my comment
   *
   * @generated from field: string comment = 7;
   */
  comment = "";

  /**
   * comment author
   *
   * @generated from field: string comment_author = 8;
   */
  commentAuthor = "";

  /**
   * comment created time
   *
   * @generated from field: string comment_created_at = 9;
   */
  commentCreatedAt = "";

  /**
   * comment modified time
   *
   * @generated from field: string comment_modified_at = 10;
   */
  commentModifiedAt = "";

  /**
   * importance
   *
   * @generated from field: carrel.common.importance.v1.Importance importance = 11;
   */
  importance = Importance.NONE_UNSPECIFIED;

  /**
   * location, this should be the actuion location, e.g. the actual page number of a page as in print.
   *
   * @generated from field: string location_actual = 12;
   */
  locationActual = "";

  /**
   * location type, e.g. page, url, etc
   *
   * @generated from field: string location_actual_type = 13;
   */
  locationActualType = "";

  /**
   * location, this could be raw location such as the index in a pdf file which does not correspond to the actual page number.
   *
   * @generated from field: string location_raw = 14;
   */
  locationRaw = "";

  /**
   * @generated from field: string location_raw_type = 15;
   */
  locationRawType = "";

  /**
   * source document title
   *
   * @generated from field: string document_title = 16;
   */
  documentTitle = "";

  /**
   * source document description
   *
   * @generated from field: string document_description = 17;
   */
  documentDescription = "";

  /**
   * source document reference
   *
   * @generated from field: string document_reference = 18;
   */
  documentReference = "";

  /**
   * source document publication year
   *
   * @generated from field: int32 document_publication_year = 19;
   */
  documentPublicationYear = 0;

  /**
   * source document publication datetime
   *
   * @generated from field: string document_publication_datetime = 20;
   */
  documentPublicationDatetime = "";

  /**
   * source document author
   *
   * @generated from field: string document_author = 21;
   */
  documentAuthor = "";

  /**
   * any other metadata about the document
   *
   * @generated from field: map<string, string> document_metadata = 22;
   */
  documentMetadata: { [key: string]: string } = {};

  /**
   * source document id, citekey
   *
   * @generated from field: string document_id = 23;
   */
  documentId = "";

  /**
   * source document id type, e.g. citekey
   *
   * @generated from field: string document_id_type = 24;
   */
  documentIdType = "";

  /**
   * document straoge id, e.g. Zotero id, or database id, where the document is stored
   *
   * @generated from field: string document_storage_id = 25;
   */
  documentStorageId = "";

  /**
   * document storage id type, e.g. Zotero
   *
   * @generated from field: string document_storage_id_type = 26;
   */
  documentStorageIdType = "";

  /**
   * document storage url, e.g. Zotero url or sqlite url
   *
   * @generated from field: string document_storage_url = 27;
   */
  documentStorageUrl = "";

  /**
   * file directory, C:/Users/xxx/Documents/xxx
   *
   * @generated from field: string file_directory = 28;
   */
  fileDirectory = "";

  /**
   * file full name, a.pdf
   *
   * @generated from field: string file_full_name = 29;
   */
  fileFullName = "";

  /**
   * file extension, pdf
   *
   * @generated from field: string file_extension = 30;
   */
  fileExtension = "";

  /**
   * @generated from field: string file_full_path = 31;
   */
  fileFullPath = "";

  /**
   * the tag that is used to select the firefly
   *
   * @generated from field: carrel.common.tag.v2.Tag select_tag = 32;
   */
  selectTag?: Tag;

  /**
   * tags
   *
   * @generated from field: repeated carrel.common.tag.v2.Tag tags = 33;
   */
  tags: Tag[] = [];

  /**
   * storage unique id, for this firefly
   *
   * @generated from field: string storage_id_str = 34;
   */
  storageIdStr = "";

  /**
   * storage numerical id, for this firefly
   *
   * @generated from field: int32 storage_id_int = 35;
   */
  storageIdInt = 0;

  /**
   * storage description
   *
   * @generated from field: string storage_description = 36;
   */
  storageDescription = "";

  /**
   * storage url, e.g. file name of the db
   *
   * @generated from field: string storage_url = 37;
   */
  storageUrl = "";

  /**
   * created time
   *
   * @generated from field: string created_at = 38;
   */
  createdAt = "";

  /**
   * modified time
   *
   * @generated from field: string modified_at = 39;
   */
  modifiedAt = "";

  /**
   * extraction time, the last time the firefly is extracted from the document
   *
   * @generated from field: string extracted_at = 40;
   */
  extractedAt = "";

  /**
   * last time this is viewed
   *
   * @generated from field: string viewed_at = 41;
   */
  viewedAt = "";

  /**
   * collection ids, a group of uuids to describe the collections that the firefly belongs to
   *
   * @generated from field: repeated string collection_uuids = 42;
   */
  collectionUuids: string[] = [];

  /**
   * meta data
   *
   * @generated from field: map<string, string> metadata = 43;
   */
  metadata: { [key: string]: string } = {};

  /**
   * additional comments, map<ISO Datetime, Comment>
   *
   * @generated from field: map<string, string> more_comments = 44;
   */
  moreComments: { [key: string]: string } = {};

  /**
   * location actual modified at
   *
   * @generated from field: string location_actual_modified_at = 45;
   */
  locationActualModifiedAt = "";

  /**
   * document pages
   *
   * @generated from field: int32 document_pages = 46;
   */
  documentPages = 0;

  /**
   * unique id, this is diffferent from uuid.
   * e.g. for a pdf annotation, this is the modified_at
   * e.g. for a firefly extracted from the textfile, this should the modified date of
   *
   * @generated from field: string unique_id = 47;
   */
  uniqueId = "";

  constructor(data?: PartialMessage<Firefly>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.common.firefly.v2.Firefly";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "light", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "full_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "comment_author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "comment_created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "comment_modified_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "importance", kind: "enum", T: proto3.getEnumType(Importance) },
    { no: 12, name: "location_actual", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "location_actual_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "location_raw", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "location_raw_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "document_title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "document_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "document_reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "document_publication_year", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 20, name: "document_publication_datetime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "document_author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "document_metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 23, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "document_id_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "document_storage_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 26, name: "document_storage_id_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 27, name: "document_storage_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 28, name: "file_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 29, name: "file_full_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "file_extension", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 31, name: "file_full_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 32, name: "select_tag", kind: "message", T: Tag },
    { no: 33, name: "tags", kind: "message", T: Tag, repeated: true },
    { no: 34, name: "storage_id_str", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 35, name: "storage_id_int", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 36, name: "storage_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 37, name: "storage_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 38, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 39, name: "modified_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "extracted_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 41, name: "viewed_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 42, name: "collection_uuids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 43, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 44, name: "more_comments", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 45, name: "location_actual_modified_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 46, name: "document_pages", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 47, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Firefly {
    return new Firefly().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Firefly {
    return new Firefly().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Firefly {
    return new Firefly().fromJsonString(jsonString, options);
  }

  static equals(a: Firefly | PlainMessage<Firefly> | undefined, b: Firefly | PlainMessage<Firefly> | undefined): boolean {
    return proto3.util.equals(Firefly, a, b);
  }
}

