// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file carrel/common/tag/v2/tag_v2.proto (package carrel.common.tag.v2, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * / A common tag for carrel system.
 *
 * @generated from message carrel.common.tag.v2.Tag
 */
export class Tag extends Message<Tag> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: optional string value = 2;
   */
  value?: string;

  /**
   * @generated from field: optional string note = 3;
   */
  note?: string;

  /**
   * @generated from field: string raw_tag_string = 4;
   */
  rawTagString = "";

  /**
   * @generated from field: string uuid = 5;
   */
  uuid = "";

  /**
   * @generated from field: repeated string collection_uuids = 6;
   */
  collectionUuids: string[] = [];

  /**
   * @generated from field: repeated string related_tag_uuids = 7;
   */
  relatedTagUuids: string[] = [];

  /**
   * db id.
   *
   * @generated from field: optional int32 id = 8;
   */
  id?: number;

  /**
   * parent id: usually the uuid of the tag or other entities that this tag is a child of.
   *
   * @generated from field: optional string parent_uuid = 9;
   */
  parentUuid?: string;

  constructor(data?: PartialMessage<Tag>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.common.tag.v2.Tag";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "raw_tag_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "collection_uuids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "related_tag_uuids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 9, name: "parent_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tag {
    return new Tag().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tag {
    return new Tag().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tag {
    return new Tag().fromJsonString(jsonString, options);
  }

  static equals(a: Tag | PlainMessage<Tag> | undefined, b: Tag | PlainMessage<Tag> | undefined): boolean {
    return proto3.util.equals(Tag, a, b);
  }
}

/**
 * @generated from message carrel.common.tag.v2.TagGroup
 */
export class TagGroup extends Message<TagGroup> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: optional string value = 2;
   */
  value?: string;

  /**
   * @generated from field: int32 key_count = 3;
   */
  keyCount = 0;

  /**
   * @generated from field: optional string uuid = 4;
   */
  uuid?: string;

  constructor(data?: PartialMessage<TagGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.common.tag.v2.TagGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "key_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TagGroup {
    return new TagGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TagGroup {
    return new TagGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TagGroup {
    return new TagGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TagGroup | PlainMessage<TagGroup> | undefined, b: TagGroup | PlainMessage<TagGroup> | undefined): boolean {
    return proto3.util.equals(TagGroup, a, b);
  }
}

/**
 * @generated from message carrel.common.tag.v2.TagKeyValueNote
 */
export class TagKeyValueNote extends Message<TagKeyValueNote> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: optional string value = 2;
   */
  value?: string;

  /**
   * @generated from field: optional string note = 3;
   */
  note?: string;

  constructor(data?: PartialMessage<TagKeyValueNote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.common.tag.v2.TagKeyValueNote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TagKeyValueNote {
    return new TagKeyValueNote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TagKeyValueNote {
    return new TagKeyValueNote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TagKeyValueNote {
    return new TagKeyValueNote().fromJsonString(jsonString, options);
  }

  static equals(a: TagKeyValueNote | PlainMessage<TagKeyValueNote> | undefined, b: TagKeyValueNote | PlainMessage<TagKeyValueNote> | undefined): boolean {
    return proto3.util.equals(TagKeyValueNote, a, b);
  }
}

