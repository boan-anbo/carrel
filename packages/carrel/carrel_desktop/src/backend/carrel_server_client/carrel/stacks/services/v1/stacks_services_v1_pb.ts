// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file carrel/stacks/services/v1/stacks_services_v1.proto (package carrel.stacks.services.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {FloatValue, Message, proto3} from "@bufbuild/protobuf";
import {Document} from "../../../common/document/v1/document_pb.js";

/**
 * @generated from message carrel.stacks.services.v1.DocumentResult
 */
export class DocumentResult extends Message<DocumentResult> {
  /**
   * @generated from field: carrel.common.document.v1.Document document = 1;
   */
  document?: Document;

  /**
   * float type for score
   *
   * @generated from field: google.protobuf.FloatValue score = 2;
   */
  score?: number;

  constructor(data?: PartialMessage<DocumentResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.stacks.services.v1.DocumentResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document", kind: "message", T: Document },
    { no: 2, name: "score", kind: "message", T: FloatValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DocumentResult {
    return new DocumentResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DocumentResult {
    return new DocumentResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DocumentResult {
    return new DocumentResult().fromJsonString(jsonString, options);
  }

  static equals(a: DocumentResult | PlainMessage<DocumentResult> | undefined, b: DocumentResult | PlainMessage<DocumentResult> | undefined): boolean {
    return proto3.util.equals(DocumentResult, a, b);
  }
}

/**
 * @generated from message carrel.stacks.services.v1.SearchResponse
 */
export class SearchResponse extends Message<SearchResponse> {
  /**
   * @generated from field: string index = 1;
   */
  index = "";

  /**
   * @generated from field: string query = 2;
   */
  query = "";

  /**
   * @generated from field: repeated carrel.stacks.services.v1.DocumentResult documents = 3;
   */
  documents: DocumentResult[] = [];

  /**
   * @generated from field: int32 page = 4;
   */
  page = 0;

  /**
   * @generated from field: int32 total = 5;
   */
  total = 0;

  constructor(data?: PartialMessage<SearchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.stacks.services.v1.SearchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "documents", kind: "message", T: DocumentResult, repeated: true },
    { no: 4, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchResponse {
    return new SearchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchResponse {
    return new SearchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchResponse {
    return new SearchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchResponse | PlainMessage<SearchResponse> | undefined, b: SearchResponse | PlainMessage<SearchResponse> | undefined): boolean {
    return proto3.util.equals(SearchResponse, a, b);
  }
}

/**
 * @generated from message carrel.stacks.services.v1.SearchRequest
 */
export class SearchRequest extends Message<SearchRequest> {
  /**
   * @generated from field: string index = 1;
   */
  index = "";

  /**
   * @generated from field: string query = 2;
   */
  query = "";

  /**
   * @generated from field: int32 page = 3;
   */
  page = 0;

  /**
   * @generated from field: int32 per_page = 4;
   */
  perPage = 0;

  constructor(data?: PartialMessage<SearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.stacks.services.v1.SearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "per_page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchRequest {
    return new SearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchRequest {
    return new SearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchRequest {
    return new SearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchRequest | PlainMessage<SearchRequest> | undefined, b: SearchRequest | PlainMessage<SearchRequest> | undefined): boolean {
    return proto3.util.equals(SearchRequest, a, b);
  }
}

