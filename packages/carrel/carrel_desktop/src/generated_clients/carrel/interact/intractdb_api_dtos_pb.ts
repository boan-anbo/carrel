// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file carrel/interact/intractdb_api_dtos.proto (package act.Repositories.addinteraction, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, protoInt64} from "@bufbuild/protobuf";

/**
 * @generated from enum act.Repositories.addinteraction.AddInteractionIdentity
 */
export enum AddInteractionIdentity {
  /**
   * @generated from enum value: ENTITY = 0;
   */
  ENTITY = 0,

  /**
   * @generated from enum value: ACT = 1;
   */
  ACT = 1,

  /**
   * @generated from enum value: SOURCE = 2;
   */
  SOURCE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AddInteractionIdentity)
proto3.util.setEnumType(AddInteractionIdentity, "act.Repositories.addinteraction.AddInteractionIdentity", [
  { no: 0, name: "ENTITY" },
  { no: 1, name: "ACT" },
  { no: 2, name: "SOURCE" },
]);

/**
 * @generated from message act.Repositories.addinteraction.AddInteractionType
 */
export class AddInteractionType extends Message<AddInteractionType> {
  /**
   * @generated from field: string label = 1;
   */
  label = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<AddInteractionType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "act.Repositories.addinteraction.AddInteractionType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddInteractionType {
    return new AddInteractionType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddInteractionType {
    return new AddInteractionType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddInteractionType {
    return new AddInteractionType().fromJsonString(jsonString, options);
  }

  static equals(a: AddInteractionType | PlainMessage<AddInteractionType> | undefined, b: AddInteractionType | PlainMessage<AddInteractionType> | undefined): boolean {
    return proto3.util.equals(AddInteractionType, a, b);
  }
}

/**
 * @generated from message act.Repositories.addinteraction.AddProperty
 */
export class AddProperty extends Message<AddProperty> {
  /**
   * @generated from field: sint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string guid = 2;
   */
  guid = "";

  /**
   * @generated from field: string key = 3;
   */
  key = "";

  /**
   * @generated from field: string value = 4;
   */
  value = "";

  constructor(data?: PartialMessage<AddProperty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "act.Repositories.addinteraction.AddProperty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 18 /* ScalarType.SINT64 */ },
    { no: 2, name: "guid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddProperty {
    return new AddProperty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddProperty {
    return new AddProperty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddProperty {
    return new AddProperty().fromJsonString(jsonString, options);
  }

  static equals(a: AddProperty | PlainMessage<AddProperty> | undefined, b: AddProperty | PlainMessage<AddProperty> | undefined): boolean {
    return proto3.util.equals(AddProperty, a, b);
  }
}

/**
 * @generated from message act.Repositories.addinteraction.CreateOrUpdateInteraction
 */
export class CreateOrUpdateInteraction extends Message<CreateOrUpdateInteraction> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * two ids must be provided to make sure the right item is updated
   *
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  /**
   * @generated from field: string label = 3;
   */
  label = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: int32 typeId = 5;
   */
  typeId = 0;

  /**
   * / Unix timestamp in  milliseconds.
   *
   * @generated from field: int32 start = 6;
   */
  start = 0;

  /**
   * / Unix timestamp in  milliseconds.
   *
   * @generated from field: int32 end = 7;
   */
  end = 0;

  /**
   * @generated from field: repeated int32 subjectIds = 8;
   */
  subjectIds: number[] = [];

  /**
   * @generated from field: repeated int32 relatedIds = 9;
   */
  relatedIds: number[] = [];

  /**
   * @generated from field: repeated int32 objectIds = 10;
   */
  objectIds: number[] = [];

  /**
   * @generated from field: repeated int32 propertyIds = 11;
   */
  propertyIds: number[] = [];

  /**
   * @generated from field: act.Repositories.addinteraction.AddInteractionIdentity identity = 12;
   */
  identity = AddInteractionIdentity.ENTITY;

  constructor(data?: PartialMessage<CreateOrUpdateInteraction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "act.Repositories.addinteraction.CreateOrUpdateInteraction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "typeId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "end", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "subjectIds", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 9, name: "relatedIds", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 10, name: "objectIds", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 11, name: "propertyIds", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 12, name: "identity", kind: "enum", T: proto3.getEnumType(AddInteractionIdentity) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrUpdateInteraction {
    return new CreateOrUpdateInteraction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrUpdateInteraction {
    return new CreateOrUpdateInteraction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrUpdateInteraction {
    return new CreateOrUpdateInteraction().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrUpdateInteraction | PlainMessage<CreateOrUpdateInteraction> | undefined, b: CreateOrUpdateInteraction | PlainMessage<CreateOrUpdateInteraction> | undefined): boolean {
    return proto3.util.equals(CreateOrUpdateInteraction, a, b);
  }
}

/**
 * @generated from message act.Repositories.addinteraction.AddNewEntityInteractionRequest
 */
export class AddNewEntityInteractionRequest extends Message<AddNewEntityInteractionRequest> {
  /**
   * @generated from field: string label = 1;
   */
  label = "";

  constructor(data?: PartialMessage<AddNewEntityInteractionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "act.Repositories.addinteraction.AddNewEntityInteractionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddNewEntityInteractionRequest {
    return new AddNewEntityInteractionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddNewEntityInteractionRequest {
    return new AddNewEntityInteractionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddNewEntityInteractionRequest {
    return new AddNewEntityInteractionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddNewEntityInteractionRequest | PlainMessage<AddNewEntityInteractionRequest> | undefined, b: AddNewEntityInteractionRequest | PlainMessage<AddNewEntityInteractionRequest> | undefined): boolean {
    return proto3.util.equals(AddNewEntityInteractionRequest, a, b);
  }
}

