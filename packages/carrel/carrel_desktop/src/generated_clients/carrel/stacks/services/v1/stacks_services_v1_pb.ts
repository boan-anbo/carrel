// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file carrel/stacks/services/v1/stacks_services_v1.proto (package carrel.stacks.services.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message carrel.stacks.services.v1.ScaffoldNewProjectRequest
 */
export class ScaffoldNewProjectRequest extends Message<ScaffoldNewProjectRequest> {
  /**
   * @generated from field: string project_name = 1;
   */
  projectName = "";

  /**
   * @generated from field: string project_parent_dir = 2;
   */
  projectParentDir = "";

  constructor(data?: PartialMessage<ScaffoldNewProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.stacks.services.v1.ScaffoldNewProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_parent_dir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScaffoldNewProjectRequest {
    return new ScaffoldNewProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScaffoldNewProjectRequest {
    return new ScaffoldNewProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScaffoldNewProjectRequest {
    return new ScaffoldNewProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ScaffoldNewProjectRequest | PlainMessage<ScaffoldNewProjectRequest> | undefined, b: ScaffoldNewProjectRequest | PlainMessage<ScaffoldNewProjectRequest> | undefined): boolean {
    return proto3.util.equals(ScaffoldNewProjectRequest, a, b);
  }
}

/**
 * @generated from message carrel.stacks.services.v1.ScaffoldNewProjectResponse
 */
export class ScaffoldNewProjectResponse extends Message<ScaffoldNewProjectResponse> {
  /**
   * @generated from field: string project_dir = 1;
   */
  projectDir = "";

  constructor(data?: PartialMessage<ScaffoldNewProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.stacks.services.v1.ScaffoldNewProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_dir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScaffoldNewProjectResponse {
    return new ScaffoldNewProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScaffoldNewProjectResponse {
    return new ScaffoldNewProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScaffoldNewProjectResponse {
    return new ScaffoldNewProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ScaffoldNewProjectResponse | PlainMessage<ScaffoldNewProjectResponse> | undefined, b: ScaffoldNewProjectResponse | PlainMessage<ScaffoldNewProjectResponse> | undefined): boolean {
    return proto3.util.equals(ScaffoldNewProjectResponse, a, b);
  }
}

