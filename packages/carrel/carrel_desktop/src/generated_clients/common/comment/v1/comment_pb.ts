// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file common/comment/v1/comment.proto (package carrel.common.comment.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, protoInt64} from "@bufbuild/protobuf";

/**
 * @generated from message carrel.common.comment.v1.Comment
 */
export class Comment extends Message<Comment> {
  /**
   * id
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   *  content
   *
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   *  author
   *
   * @generated from field: string author = 3;
   */
  author = "";

  /**
   *  created, UNIX timestamp
   *
   * @generated from field: int64 created = 4;
   */
  created = protoInt64.zero;

  /**
   *  updated 
   *
   * @generated from field: int64 updated = 5;
   */
  updated = protoInt64.zero;

  constructor(data?: PartialMessage<Comment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.common.comment.v1.Comment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "updated", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Comment {
    return new Comment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Comment {
    return new Comment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Comment {
    return new Comment().fromJsonString(jsonString, options);
  }

  static equals(a: Comment | PlainMessage<Comment> | undefined, b: Comment | PlainMessage<Comment> | undefined): boolean {
    return proto3.util.equals(Comment, a, b);
  }
}

