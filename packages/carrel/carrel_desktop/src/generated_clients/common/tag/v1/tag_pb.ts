// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file common/tag/v1/tag.proto (package carrel.common.tag.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import {SnippetLocation} from "../../snippet_location/v1/snippet_location_pb.js";

/**
 * / A common tag for carrel system.
 *
 * @generated from message carrel.common.tag.v1.Tag
 */
export class Tag extends Message<Tag> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: optional string value = 2;
   */
  value?: string;

  /**
   * @generated from field: optional string note = 3;
   */
  note?: string;

  /**
   * @generated from field: string tag_marker = 4;
   */
  tagMarker = "";

  /**
   * @generated from field: optional carrel.common.snippet_location.v1.SnippetLocation snippet_location = 5;
   */
  snippetLocation?: SnippetLocation;

  /**
   * @generated from field: string uuid = 6;
   */
  uuid = "";

  constructor(data?: PartialMessage<Tag>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.common.tag.v1.Tag";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "tag_marker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "snippet_location", kind: "message", T: SnippetLocation, opt: true },
    { no: 6, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tag {
    return new Tag().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tag {
    return new Tag().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tag {
    return new Tag().fromJsonString(jsonString, options);
  }

  static equals(a: Tag | PlainMessage<Tag> | undefined, b: Tag | PlainMessage<Tag> | undefined): boolean {
    return proto3.util.equals(Tag, a, b);
  }
}

