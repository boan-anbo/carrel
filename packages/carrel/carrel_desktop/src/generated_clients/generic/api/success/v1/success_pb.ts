// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file generic/api/success/v1/success.proto (package generic.api.response.success.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * The response message containing the greetings.
 *
 * @generated from message generic.api.response.success.v1.SuccessResponse
 */
export class SuccessResponse extends Message<SuccessResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<SuccessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "generic.api.response.success.v1.SuccessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuccessResponse {
    return new SuccessResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuccessResponse {
    return new SuccessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuccessResponse {
    return new SuccessResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuccessResponse | PlainMessage<SuccessResponse> | undefined, b: SuccessResponse | PlainMessage<SuccessResponse> | undefined): boolean {
    return proto3.util.equals(SuccessResponse, a, b);
  }
}

