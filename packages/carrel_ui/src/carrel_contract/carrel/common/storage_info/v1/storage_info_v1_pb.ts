// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file carrel/common/storage_info/v1/storage_info_v1.proto (package carrel.common.storage_info.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

// a record of storage of a piece of digital information.

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message carrel.common.storage_info.v1.StorageInfo
 */
export class StorageInfo extends Message<StorageInfo> {
  /**
   * id
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * the unique id of the data in the storage
   *
   * @generated from field: string store_unique_id = 2;
   */
  storeUniqueId = "";

  /**
   * the unique id of the storage if any
   *
   * @generated from field: string store_id = 3;
   */
  storeId = "";

  /**
   * the url of the storage if any
   *
   * @generated from field: string store_url = 4;
   */
  storeUrl = "";

  /**
   * textual infomation about the store
   *
   * @generated from field: string store_info = 5;
   */
  storeInfo = "";

  constructor(data?: PartialMessage<StorageInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.common.storage_info.v1.StorageInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "store_unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "store_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "store_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "store_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageInfo {
    return new StorageInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageInfo {
    return new StorageInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageInfo {
    return new StorageInfo().fromJsonString(jsonString, options);
  }

  static equals(a: StorageInfo | PlainMessage<StorageInfo> | undefined, b: StorageInfo | PlainMessage<StorageInfo> | undefined): boolean {
    return proto3.util.equals(StorageInfo, a, b);
  }
}

