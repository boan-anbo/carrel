# Query
query GetInteractions {
    interactions {
        edges {
            cursor
            node {
                ...interactionFragment

            }
        }
        nodes {
            ...interactionFragment
        }
        totalCount
        ...pageInfoFragment
    }
}


query GetInteractionFullWithAllRelations($id: Long!) {
    fullInteractionWithAllRelations(id: $id) {
        ...interactionResultFragment
    }
}


query GetRecentInteractions {
    interactions(order: {
        created: DESC
    }) {
        nodes {
            ...interactionFragment
        }
    }

}

query FilterInteractionsByLabel($labelFilter: String!) {
    interactions(
        where: {
            label: { contains: $labelFilter }
        }
        order: { created: DESC }
    ) {
        nodes {
            ...interactionFragment
        }
        edges {
            cursor
            node {
                ...interactionFragment
            }

        }
    }
}

query FilterInteractionsByLabelAndSortByRelation($labelFilter: String!) {
    interactions(
        where: {
            label: { contains: $labelFilter }
        }
        order: { asFirstActsCount: ASC }
    ) {
        nodes {
            ...interactionFragment
        }
        edges {
            cursor
            node {
                ...interactionFragment
            }

        }
    }
}

query GetInteractionFull($id: Long!) {
    interactionFull(id: $id) {
        ...interactionResultFragment
    }
}

# Delete
mutation DeleteInteraction($id: Long!) {
    deleteInteraction(id: $id)
}

# Add new entity
mutation AddNewInteractionEntity($label: String!, $identity: InteractionIdentity!) {
    addNewEntityInteraction(label: $label, identity: $identity) {
        ...interactionFragment
    }
}

# Add interaction.
mutation AddInteraction($request: CreateOrUpdateInteractionRequestDtoInput!) {
    createOrUpdateInteraction(requestDto: $request) {

        ...interactionFragment
    }
}


fragment interactionFragment on Interaction {
    id,
    uuid
    description
    content
    label,
    identity,

    subjects {
        ...subjectFragment
    }
    subjectsCount
    asSubjectsCount

    firstActs {
        ...firstActFragment
    }
    firstActsCount
    asFirstActsCount

    objects {
        ...objectFragment
    }
    objectsCount
    asObjectsCount

    parallels {
        ...parallelFragment
    }
    parallelsCount
    asParallelsCount

    settings {
        ...settingFragment
    }
    settingsCount
    asSettingsCount

    secondActs {
        ...secondActFragment
    }
    secondActsCount

    indirectObjects {
        ...indirectObjectFragment
    }
    indirectObjectsCount
    asIndirectObjectsCount

    references {
        ...referenceFragment
    }
    referencesCount
    asReferencesCount

    contexts {
        ...contextFragment
    }
    contextsCount
    asContextsCount

    purposes {
        ...purposeFragment
    }
    purposesCount
    asPurposesCount

    start
    end

    created
    modified
}


fragment firstActFragment on FirstActRelation {
    description
    content
    label

    hostInteractionId
    type
    uuid
    weight
    linkedInteraction {
        ...MinimalInteractionFragment
    }
    linkedInteractionId
}

fragment secondActFragment on SecondActRelation {
    description
    content
    label

    hostInteractionId
    type
    uuid
    weight
    linkedInteraction {
        ...MinimalInteractionFragment
    }
    linkedInteractionId
}

fragment subjectFragment on SubjectRelation {
    hostInteractionId
    type
    uuid
    description
    label
    weight
    linkedInteraction {
        ...MinimalInteractionFragment
    }
    linkedInteractionId
}

fragment objectFragment on ObjectRelation {
    hostInteractionId
    type
    uuid
    description
    label
    weight
    linkedInteraction {
        ...MinimalInteractionFragment
    }
    linkedInteractionId
}

fragment parallelFragment on ParallelRelation {
    hostInteractionId
    type
    uuid
    description
    label
    weight
    linkedInteraction {
        ...MinimalInteractionFragment
    }
    linkedInteractionId
}

fragment settingFragment on SettingRelation {
    hostInteractionId
    type
    uuid
    description
    label
    weight
    linkedInteraction {
        ...MinimalInteractionFragment
    }
    linkedInteractionId
}

fragment contextFragment on ContextRelation {
    hostInteractionId
    type
    uuid
    description
    label
    weight
    linkedInteraction {
        ...MinimalInteractionFragment
    }
    linkedInteractionId
}

fragment purposeFragment on PurposeRelation {
    hostInteractionId
    type
    uuid
    description
    label
    weight
    linkedInteraction {
        ...MinimalInteractionFragment
    }
    linkedInteractionId
}

fragment referenceFragment on ReferenceRelation {
    hostInteractionId
    type
    uuid
    description
    label
    weight
    linkedInteraction {
        ...MinimalInteractionFragment
    }
    linkedInteractionId
}

fragment indirectObjectFragment on IndirectObjectRelation {

    type
    uuid
    description
    label
    weight
    hostInteractionId
    linkedInteraction {
        ...MinimalInteractionFragment
    }
    linkedInteractionId
}


fragment MinimalInteractionFragment on Interaction {
    id
    uuid
    label
}





fragment pageInfoFragment on InteractionsConnection {
    pageInfo {
        hasNextPage

        hasPreviousPage

        startCursor

        endCursor
    }
}

fragment interactionResultFragment on InteractionResult {
    interaction {
        ...interactionFragment
    }
    graph {
        ...graphFragment
    }
}

fragment graphFragment on GraphOfRelationAndInteraction {
    uuid
    nodes {
        ...nodeFragment
    }
    edges {
        ...edgeFragment
    }
}

fragment nodeFragment on NodeOfInteraction {
    id
    uuid
    label
    description
    content
    data {
        ...interactionFragment
    }
}

fragment edgeFragment on EdgeOfRelation {
    id
    uuid
    displayId
    label
    description
    content
    weight
    data {
        ...relationFragment
    }
    sourceId
    targetId
}
