# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: GraphQLQuery
    mutation: GraphQLMutation
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer(
    "Deferred when true."
    if: Boolean,
    "If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to."
    label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream(
    "Streamed when true."
    if: Boolean,
    "The initial elements that shall be send down to the consumer."
    initialCount: Int! = 0,
    "If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to."
    label: String
) on FIELD

type ContextRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Int!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Int!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type EdgeOfRelation {
    content: String
    data: Relation
    description: String
    displayId: String
    id: String
    label: String
    sourceId: Int!
    targetId: Int!
    uuid: UUID
    weight: Int!
}

type FirstAct {
    content: String
    description: String
    guid: UUID!
    id: Int!
    interactions: [Interaction]
    label: String
}

type GraphOfRelationAndInteraction {
    edges: [EdgeOfRelation]
    nodes: [NodeOfInteraction]
    uuid: UUID!
}

type GraphQLMutation {
    addNewEntityInteraction(label: String!): Interaction
    createOrUpdateInteraction(requestDto: CreateOrUpdateInteractionRequestDtoInput!): Interaction
    createOrUpdateRelation(requestDto: CreateOrUpdateRelationDtoInput!): Relation!
    deleteInteraction(id: Int!): Int!
    deleteRelation(hostInteractionId: Int!, linkedInteractionId: Int!, relationId: UUID!, type: RelationTypes!): Int!
}

type GraphQLQuery {
    fullInteractionWithAllRelations(id: Int!): InteractionResult!
    interactionFull(id: Int!): InteractionResult!
    interactions(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        order: [InteractionSortInput!],
        where: InteractionFilterInput
    ): InteractionsConnection
}

type IndirectObjectRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Int!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Int!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type Interaction {
    asContexts: [ContextRelation]
    asIndirectObjects: [IndirectObjectRelation]
    asObjects: [ObjectRelation]
    asParallels: [ParallelRelation]
    asPurposes: [PurposeRelation]
    asReferences: [ReferenceRelation]
    asSettings: [SettingRelation]
    asSubjects: [SubjectRelation]
    content: String
    contexts: [ContextRelation]
    description: String
    end: DateTime
    firstAct: FirstAct!
    firstActId: Int!
    id: Int!
    identity: InteractionIdentity!
    indirectObjects: [IndirectObjectRelation]
    label: String!
    objects: [ObjectRelation]
    parallels: [ParallelRelation]
    properties: [Property]
    purposes: [PurposeRelation]
    references: [ReferenceRelation]
    secondAct: SecondAct
    secondActId: Int
    settings: [SettingRelation]
    start: DateTime
    subjects: [SubjectRelation]
    uuid: UUID!
}

type InteractionResult {
    graph: GraphOfRelationAndInteraction
    interaction: Interaction
    resultType: InteractionResultType!
}

"A connection to a list of items."
type InteractionsConnection {
    "A list of edges."
    edges: [InteractionsEdge!]
    "A flattened list of the nodes."
    nodes: [Interaction]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int!
}

"An edge in a connection."
type InteractionsEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Interaction
}

type NodeOfInteraction {
    content: String
    data: Interaction
    description: String
    id: Int!
    label: String
    uuid: UUID!
}

type ObjectRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Int!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Int!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "Indicates whether more edges exist following the set defined by the clients arguments."
    hasNextPage: Boolean!
    "Indicates whether more edges exist prior the set defined by the clients arguments."
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type ParallelRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Int!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Int!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type Property {
    description: String
    guid: UUID!
    id: Int!
    interaction: Interaction
    interactionId: Int!
    key: String
    value: String
}

type PurposeRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Int!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Int!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type ReferenceRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Int!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Int!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type Relation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Int!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Int!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type SecondAct {
    content: String
    description: String
    guid: UUID!
    id: Int!
    interactions: [Interaction]
    label: String
}

type SettingRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Int!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Int!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type SubjectRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Int!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Int!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

enum AddInteractionIdentity {
    ACT
    ENTITY
    SOURCE
}

enum InteractionIdentity {
    ACT
    ENTITY
    SOURCE
}

enum InteractionResultType {
    "With owned relations, i.e. relations that are actively linked to it."
    FULL_INTERACTION
    "With owned relations and all reverse relations that are linked to it."
    FULL_INTERACTION_WITH_ALL_RELATIONS
    "Only the essential interaction properties are returned."
    SCALAR_INTERACTION
}

enum RelationTypes {
    CONTEXT_RELATION
    INDIRECT_OBJECT_RELATION
    OBJECT_RELATION
    PARALLEL_RELATION
    PURPOSE_RELATION
    REFERENCE_RELATION
    SETTING_RELATION
    SUBJECT_RELATION
}

enum RelationWeight {
    IMPORTANT
    MOST_IMPORTANT
    MUST
    NEVER
    NOT_IMPORTANT
    SOMEWHAT_IMPORTANT
    VERY_IMPORTANT
}

enum SortEnumType {
    ASC
    DESC
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar UUID

input ComparableGuidOperationFilterInput {
    eq: UUID
    gt: UUID
    gte: UUID
    in: [UUID!]
    lt: UUID
    lte: UUID
    neq: UUID
    ngt: UUID
    ngte: UUID
    nin: [UUID!]
    nlt: UUID
    nlte: UUID
}

input ComparableInt32OperationFilterInput {
    eq: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    neq: Int
    ngt: Int
    ngte: Int
    nin: [Int!]
    nlt: Int
    nlte: Int
}

input ComparableNullableOfDateTimeOperationFilterInput {
    eq: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime]
    lt: DateTime
    lte: DateTime
    neq: DateTime
    ngt: DateTime
    ngte: DateTime
    nin: [DateTime]
    nlt: DateTime
    nlte: DateTime
}

input ComparableNullableOfGuidOperationFilterInput {
    eq: UUID
    gt: UUID
    gte: UUID
    in: [UUID]
    lt: UUID
    lte: UUID
    neq: UUID
    ngt: UUID
    ngte: UUID
    nin: [UUID]
    nlt: UUID
    nlte: UUID
}

input ComparableNullableOfInt32OperationFilterInput {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    neq: Int
    ngt: Int
    ngte: Int
    nin: [Int]
    nlt: Int
    nlte: Int
}

input ContextRelationFilterInput {
    and: [ContextRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt32OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt32OperationFilterInput
    or: [ContextRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input CreateOrUpdateInteractionRequestDtoInput {
    contextIds: [CreateOrUpdateRelationDtoInput!]!
    description: String
    end: Long!
    firstActId: Int!
    id: Int
    identity: AddInteractionIdentity
    indirectObjectIds: [CreateOrUpdateRelationDtoInput!]!
    label: String!
    objectIds: [CreateOrUpdateRelationDtoInput!]!
    parallelIds: [CreateOrUpdateRelationDtoInput!]!
    propertyIds: [Int!]
    purposeIds: [CreateOrUpdateRelationDtoInput!]!
    referenceIds: [CreateOrUpdateRelationDtoInput!]!
    secondActId: Int!
    settingIds: [CreateOrUpdateRelationDtoInput!]!
    start: Long!
    subjectIds: [CreateOrUpdateRelationDtoInput!]!
    uuid: UUID
}

input CreateOrUpdateRelationDtoInput {
    content: String
    description: String
    hostInteractionId: Int!
    id: Int
    label: String
    linkedInteractionId: Int!
    relationType: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

input FirstActFilterInput {
    and: [FirstActFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    guid: ComparableGuidOperationFilterInput
    id: ComparableInt32OperationFilterInput
    interactions: ListFilterInputTypeOfInteractionFilterInput
    label: StringOperationFilterInput
    or: [FirstActFilterInput!]
}

input FirstActSortInput {
    content: SortEnumType
    description: SortEnumType
    guid: SortEnumType
    id: SortEnumType
    label: SortEnumType
}

input IndirectObjectRelationFilterInput {
    and: [IndirectObjectRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt32OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt32OperationFilterInput
    or: [IndirectObjectRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input InteractionFilterInput {
    and: [InteractionFilterInput!]
    asContexts: ListFilterInputTypeOfContextRelationFilterInput
    asIndirectObjects: ListFilterInputTypeOfIndirectObjectRelationFilterInput
    asObjects: ListFilterInputTypeOfObjectRelationFilterInput
    asParallels: ListFilterInputTypeOfParallelRelationFilterInput
    asPurposes: ListFilterInputTypeOfPurposeRelationFilterInput
    asReferences: ListFilterInputTypeOfReferenceRelationFilterInput
    asSettings: ListFilterInputTypeOfSettingRelationFilterInput
    asSubjects: ListFilterInputTypeOfSubjectRelationFilterInput
    content: StringOperationFilterInput
    contexts: ListFilterInputTypeOfContextRelationFilterInput
    description: StringOperationFilterInput
    end: ComparableNullableOfDateTimeOperationFilterInput
    firstAct: FirstActFilterInput
    firstActId: ComparableInt32OperationFilterInput
    id: ComparableInt32OperationFilterInput
    identity: InteractionIdentityOperationFilterInput
    indirectObjects: ListFilterInputTypeOfIndirectObjectRelationFilterInput
    label: StringOperationFilterInput
    objects: ListFilterInputTypeOfObjectRelationFilterInput
    or: [InteractionFilterInput!]
    parallels: ListFilterInputTypeOfParallelRelationFilterInput
    properties: ListFilterInputTypeOfPropertyFilterInput
    purposes: ListFilterInputTypeOfPurposeRelationFilterInput
    references: ListFilterInputTypeOfReferenceRelationFilterInput
    secondAct: SecondActFilterInput
    secondActId: ComparableNullableOfInt32OperationFilterInput
    settings: ListFilterInputTypeOfSettingRelationFilterInput
    start: ComparableNullableOfDateTimeOperationFilterInput
    subjects: ListFilterInputTypeOfSubjectRelationFilterInput
    uuid: ComparableGuidOperationFilterInput
}

input InteractionIdentityOperationFilterInput {
    eq: InteractionIdentity
    in: [InteractionIdentity!]
    neq: InteractionIdentity
    nin: [InteractionIdentity!]
}

input InteractionSortInput {
    content: SortEnumType
    description: SortEnumType
    end: SortEnumType
    firstAct: FirstActSortInput
    firstActId: SortEnumType
    id: SortEnumType
    identity: SortEnumType
    label: SortEnumType
    secondAct: SecondActSortInput
    secondActId: SortEnumType
    start: SortEnumType
    uuid: SortEnumType
}

input ListFilterInputTypeOfContextRelationFilterInput {
    all: ContextRelationFilterInput
    any: Boolean
    none: ContextRelationFilterInput
    some: ContextRelationFilterInput
}

input ListFilterInputTypeOfIndirectObjectRelationFilterInput {
    all: IndirectObjectRelationFilterInput
    any: Boolean
    none: IndirectObjectRelationFilterInput
    some: IndirectObjectRelationFilterInput
}

input ListFilterInputTypeOfInteractionFilterInput {
    all: InteractionFilterInput
    any: Boolean
    none: InteractionFilterInput
    some: InteractionFilterInput
}

input ListFilterInputTypeOfObjectRelationFilterInput {
    all: ObjectRelationFilterInput
    any: Boolean
    none: ObjectRelationFilterInput
    some: ObjectRelationFilterInput
}

input ListFilterInputTypeOfParallelRelationFilterInput {
    all: ParallelRelationFilterInput
    any: Boolean
    none: ParallelRelationFilterInput
    some: ParallelRelationFilterInput
}

input ListFilterInputTypeOfPropertyFilterInput {
    all: PropertyFilterInput
    any: Boolean
    none: PropertyFilterInput
    some: PropertyFilterInput
}

input ListFilterInputTypeOfPurposeRelationFilterInput {
    all: PurposeRelationFilterInput
    any: Boolean
    none: PurposeRelationFilterInput
    some: PurposeRelationFilterInput
}

input ListFilterInputTypeOfReferenceRelationFilterInput {
    all: ReferenceRelationFilterInput
    any: Boolean
    none: ReferenceRelationFilterInput
    some: ReferenceRelationFilterInput
}

input ListFilterInputTypeOfSettingRelationFilterInput {
    all: SettingRelationFilterInput
    any: Boolean
    none: SettingRelationFilterInput
    some: SettingRelationFilterInput
}

input ListFilterInputTypeOfSubjectRelationFilterInput {
    all: SubjectRelationFilterInput
    any: Boolean
    none: SubjectRelationFilterInput
    some: SubjectRelationFilterInput
}

input ObjectRelationFilterInput {
    and: [ObjectRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt32OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt32OperationFilterInput
    or: [ObjectRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input ParallelRelationFilterInput {
    and: [ParallelRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt32OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt32OperationFilterInput
    or: [ParallelRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input PropertyFilterInput {
    and: [PropertyFilterInput!]
    description: StringOperationFilterInput
    guid: ComparableGuidOperationFilterInput
    id: ComparableInt32OperationFilterInput
    interaction: InteractionFilterInput
    interactionId: ComparableInt32OperationFilterInput
    key: StringOperationFilterInput
    or: [PropertyFilterInput!]
    value: StringOperationFilterInput
}

input PurposeRelationFilterInput {
    and: [PurposeRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt32OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt32OperationFilterInput
    or: [PurposeRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input ReferenceRelationFilterInput {
    and: [ReferenceRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt32OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt32OperationFilterInput
    or: [ReferenceRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input RelationTypesOperationFilterInput {
    eq: RelationTypes
    in: [RelationTypes!]
    neq: RelationTypes
    nin: [RelationTypes!]
}

input RelationWeightOperationFilterInput {
    eq: RelationWeight
    in: [RelationWeight!]
    neq: RelationWeight
    nin: [RelationWeight!]
}

input SecondActFilterInput {
    and: [SecondActFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    guid: ComparableGuidOperationFilterInput
    id: ComparableInt32OperationFilterInput
    interactions: ListFilterInputTypeOfInteractionFilterInput
    label: StringOperationFilterInput
    or: [SecondActFilterInput!]
}

input SecondActSortInput {
    content: SortEnumType
    description: SortEnumType
    guid: SortEnumType
    id: SortEnumType
    label: SortEnumType
}

input SettingRelationFilterInput {
    and: [SettingRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt32OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt32OperationFilterInput
    or: [SettingRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input StringOperationFilterInput {
    and: [StringOperationFilterInput!]
    contains: String
    endsWith: String
    eq: String
    in: [String]
    ncontains: String
    nendsWith: String
    neq: String
    nin: [String]
    nstartsWith: String
    or: [StringOperationFilterInput!]
    startsWith: String
}

input SubjectRelationFilterInput {
    and: [SubjectRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt32OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt32OperationFilterInput
    or: [SubjectRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}
