# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: GraphQLQuery
    mutation: GraphQLMutation
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer(
    "Deferred when true."
    if: Boolean,
    "If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to."
    label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream(
    "Streamed when true."
    if: Boolean,
    "The initial elements that shall be send down to the consumer."
    initialCount: Int! = 0,
    "If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to."
    label: String
) on FIELD

type ContextRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Long!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Long!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type EdgeOfRelation {
    content: String
    data: Relation
    description: String
    displayId: String
    id: String
    label: String
    sourceId: Long!
    targetId: Long!
    uuid: UUID
    weight: Long!
}

type FirstActRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Long!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Long!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type GraphOfRelationAndInteraction {
    edges: [EdgeOfRelation]
    nodes: [NodeOfInteraction]
    uuid: UUID!
}

type GraphQLMutation {
    addNewEntityInteraction(label: String!): Interaction
    createOrUpdateInteraction(requestDto: CreateOrUpdateInteractionRequestDtoInput!): Interaction
    createOrUpdateRelation(requestDto: CreateOrUpdateRelationDtoInput!): Relation!
    deleteInteraction(id: Long!): Long!
    deleteRelation(hostInteractionId: Long!, linkedInteractionId: Long!, relationId: UUID!, type: RelationTypes!): Long!
}

type GraphQLQuery {
    fullInteractionWithAllRelations(id: Long!): InteractionResult!
    interactionFull(id: Long!): InteractionResult!
    interactions(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        order: [InteractionSortInput!],
        where: InteractionFilterInput
    ): InteractionsConnection
}

type IndirectObjectRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Long!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Long!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type Interaction {
    asContexts: [ContextRelation]
    asContextsCount: Long!
    asFirstActs: [FirstActRelation]
    asFirstActsCount: Long!
    asIndirectObjects: [IndirectObjectRelation]
    asIndirectObjectsCount: Long!
    asObjects: [ObjectRelation]
    asObjectsCount: Long!
    asParallels: [ParallelRelation]
    asParallelsCount: Long!
    asPurposes: [PurposeRelation]
    asPurposesCount: Long!
    asReferences: [ReferenceRelation]
    asReferencesCount: Long!
    asSecondActs: [SecondActRelation]
    asSecondActsCount: Long!
    asSettings: [SettingRelation]
    asSettingsCount: Long!
    asSubjects: [SubjectRelation]
    asSubjectsCount: Long!
    content: String
    contexts: [ContextRelation]
    contextsCount: Long!
    created: DateTime!
    description: String
    end: DateTime
    firstActs: [FirstActRelation]
    firstActsCount: Long!
    id: Long!
    identity: InteractionIdentity!
    indirectObjects: [IndirectObjectRelation]
    indirectObjectsCount: Long!
    label: String!
    modified: DateTime!
    objects: [ObjectRelation]
    objectsCount: Long!
    parallels: [ParallelRelation]
    parallelsCount: Long!
    properties: [Property]
    propertiesCount: Long!
    purposes: [PurposeRelation]
    purposesCount: Long!
    references: [ReferenceRelation]
    referencesCount: Long!
    secondActs: [SecondActRelation]
    secondActsCount: Long!
    sentence: String
    settings: [SettingRelation]
    settingsCount: Long!
    start: DateTime
    subjects: [SubjectRelation]
    subjectsCount: Long!
    uuid: UUID!
}

type InteractionResult {
    graph: GraphOfRelationAndInteraction
    interaction: Interaction
    resultType: InteractionResultType!
}

"A connection to a list of items."
type InteractionsConnection {
    "A list of edges."
    edges: [InteractionsEdge!]
    "A flattened list of the nodes."
    nodes: [Interaction]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int!
}

"An edge in a connection."
type InteractionsEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Interaction
}

type NodeOfInteraction {
    content: String
    data: Interaction
    description: String
    id: Long!
    label: String
    uuid: UUID!
}

type ObjectRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Long!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Long!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "Indicates whether more edges exist following the set defined by the clients arguments."
    hasNextPage: Boolean!
    "Indicates whether more edges exist prior the set defined by the clients arguments."
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type ParallelRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Long!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Long!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type Property {
    description: String
    guid: UUID!
    id: Long!
    interaction: Interaction
    interactionId: Long!
    key: String
    value: String
}

type PurposeRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Long!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Long!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type ReferenceRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Long!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Long!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type Relation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Long!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Long!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type SecondActRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Long!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Long!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type SettingRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Long!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Long!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

type SubjectRelation {
    content: String
    description: String
    hostInteraction: Interaction
    hostInteractionId: Long!
    label: String
    linkedInteraction: Interaction
    linkedInteractionId: Long!
    type: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

enum InteractionIdentity {
    ACT
    ENTITY
    INTERACTION
    SOURCE
}

enum InteractionResultType {
    "With owned relations, i.e. relations that are actively linked to it."
    FULL_INTERACTION
    "With owned relations and all reverse relations that are linked to it."
    FULL_INTERACTION_WITH_ALL_RELATIONS
    "Only the essential interaction properties are returned."
    SCALAR_INTERACTION
}

enum RelationTypes {
    CONTEXT_RELATION
    FIRST_ACT_RELATION
    INDIRECT_OBJECT_RELATION
    OBJECT_RELATION
    PARALLEL_RELATION
    PURPOSE_RELATION
    REFERENCE_RELATION
    SECOND_ACT_RELATION
    SETTING_RELATION
    SUBJECT_RELATION
}

enum RelationWeight {
    IMPORTANT
    MOST_IMPORTANT
    MUST
    NEVER
    NOT_IMPORTANT
    SOMEWHAT_IMPORTANT
    VERY_IMPORTANT
}

enum SortEnumType {
    ASC
    DESC
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar UUID

input ComparableDateTimeOperationFilterInput {
    eq: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    neq: DateTime
    ngt: DateTime
    ngte: DateTime
    nin: [DateTime!]
    nlt: DateTime
    nlte: DateTime
}

input ComparableGuidOperationFilterInput {
    eq: UUID
    gt: UUID
    gte: UUID
    in: [UUID!]
    lt: UUID
    lte: UUID
    neq: UUID
    ngt: UUID
    ngte: UUID
    nin: [UUID!]
    nlt: UUID
    nlte: UUID
}

input ComparableInt64OperationFilterInput {
    eq: Long
    gt: Long
    gte: Long
    in: [Long!]
    lt: Long
    lte: Long
    neq: Long
    ngt: Long
    ngte: Long
    nin: [Long!]
    nlt: Long
    nlte: Long
}

input ComparableNullableOfDateTimeOperationFilterInput {
    eq: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime]
    lt: DateTime
    lte: DateTime
    neq: DateTime
    ngt: DateTime
    ngte: DateTime
    nin: [DateTime]
    nlt: DateTime
    nlte: DateTime
}

input ComparableNullableOfGuidOperationFilterInput {
    eq: UUID
    gt: UUID
    gte: UUID
    in: [UUID]
    lt: UUID
    lte: UUID
    neq: UUID
    ngt: UUID
    ngte: UUID
    nin: [UUID]
    nlt: UUID
    nlte: UUID
}

input ContextRelationFilterInput {
    and: [ContextRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt64OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt64OperationFilterInput
    or: [ContextRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input CreateOrUpdateInteractionRequestDtoInput {
    content: String!
    contextDtos: [CreateOrUpdateRelationDtoInput!]
    description: String!
    end: DateTime
    firstActDtos: [CreateOrUpdateRelationDtoInput!]!
    id: Long
    identity: InteractionIdentity!
    indirectObjectDtos: [CreateOrUpdateRelationDtoInput!]
    label: String!
    objectDtos: [CreateOrUpdateRelationDtoInput!]
    parallelDtos: [CreateOrUpdateRelationDtoInput!]
    propertyIds: [Long!]
    purposeDtos: [CreateOrUpdateRelationDtoInput!]
    referenceDtos: [CreateOrUpdateRelationDtoInput!]
    secondActDtos: [CreateOrUpdateRelationDtoInput!]
    settingDtos: [CreateOrUpdateRelationDtoInput!]
    start: DateTime
    subjectDtos: [CreateOrUpdateRelationDtoInput!]
    uuid: UUID
}

input CreateOrUpdateRelationDtoInput {
    content: String
    description: String
    hostInteractionId: Long!
    id: Long
    label: String
    linkedInteractionId: Long!
    relationType: RelationTypes!
    uuid: UUID
    weight: RelationWeight!
}

input FirstActRelationFilterInput {
    and: [FirstActRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt64OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt64OperationFilterInput
    or: [FirstActRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input IndirectObjectRelationFilterInput {
    and: [IndirectObjectRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt64OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt64OperationFilterInput
    or: [IndirectObjectRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input InteractionFilterInput {
    and: [InteractionFilterInput!]
    asContexts: ListFilterInputTypeOfContextRelationFilterInput
    asContextsCount: ComparableInt64OperationFilterInput
    asFirstActs: ListFilterInputTypeOfFirstActRelationFilterInput
    asFirstActsCount: ComparableInt64OperationFilterInput
    asIndirectObjects: ListFilterInputTypeOfIndirectObjectRelationFilterInput
    asIndirectObjectsCount: ComparableInt64OperationFilterInput
    asObjects: ListFilterInputTypeOfObjectRelationFilterInput
    asObjectsCount: ComparableInt64OperationFilterInput
    asParallels: ListFilterInputTypeOfParallelRelationFilterInput
    asParallelsCount: ComparableInt64OperationFilterInput
    asPurposes: ListFilterInputTypeOfPurposeRelationFilterInput
    asPurposesCount: ComparableInt64OperationFilterInput
    asReferences: ListFilterInputTypeOfReferenceRelationFilterInput
    asReferencesCount: ComparableInt64OperationFilterInput
    asSecondActs: ListFilterInputTypeOfSecondActRelationFilterInput
    asSecondActsCount: ComparableInt64OperationFilterInput
    asSettings: ListFilterInputTypeOfSettingRelationFilterInput
    asSettingsCount: ComparableInt64OperationFilterInput
    asSubjects: ListFilterInputTypeOfSubjectRelationFilterInput
    asSubjectsCount: ComparableInt64OperationFilterInput
    content: StringOperationFilterInput
    contexts: ListFilterInputTypeOfContextRelationFilterInput
    contextsCount: ComparableInt64OperationFilterInput
    created: ComparableDateTimeOperationFilterInput
    description: StringOperationFilterInput
    end: ComparableNullableOfDateTimeOperationFilterInput
    firstActs: ListFilterInputTypeOfFirstActRelationFilterInput
    firstActsCount: ComparableInt64OperationFilterInput
    id: ComparableInt64OperationFilterInput
    identity: InteractionIdentityOperationFilterInput
    indirectObjects: ListFilterInputTypeOfIndirectObjectRelationFilterInput
    indirectObjectsCount: ComparableInt64OperationFilterInput
    label: StringOperationFilterInput
    modified: ComparableDateTimeOperationFilterInput
    objects: ListFilterInputTypeOfObjectRelationFilterInput
    objectsCount: ComparableInt64OperationFilterInput
    or: [InteractionFilterInput!]
    parallels: ListFilterInputTypeOfParallelRelationFilterInput
    parallelsCount: ComparableInt64OperationFilterInput
    properties: ListFilterInputTypeOfPropertyFilterInput
    propertiesCount: ComparableInt64OperationFilterInput
    purposes: ListFilterInputTypeOfPurposeRelationFilterInput
    purposesCount: ComparableInt64OperationFilterInput
    references: ListFilterInputTypeOfReferenceRelationFilterInput
    referencesCount: ComparableInt64OperationFilterInput
    secondActs: ListFilterInputTypeOfSecondActRelationFilterInput
    secondActsCount: ComparableInt64OperationFilterInput
    sentence: StringOperationFilterInput
    settings: ListFilterInputTypeOfSettingRelationFilterInput
    settingsCount: ComparableInt64OperationFilterInput
    start: ComparableNullableOfDateTimeOperationFilterInput
    subjects: ListFilterInputTypeOfSubjectRelationFilterInput
    subjectsCount: ComparableInt64OperationFilterInput
    uuid: ComparableGuidOperationFilterInput
}

input InteractionIdentityOperationFilterInput {
    eq: InteractionIdentity
    in: [InteractionIdentity!]
    neq: InteractionIdentity
    nin: [InteractionIdentity!]
}

input InteractionSortInput {
    asContextsCount: SortEnumType
    asFirstActsCount: SortEnumType
    asIndirectObjectsCount: SortEnumType
    asObjectsCount: SortEnumType
    asParallelsCount: SortEnumType
    asPurposesCount: SortEnumType
    asReferencesCount: SortEnumType
    asSecondActsCount: SortEnumType
    asSettingsCount: SortEnumType
    asSubjectsCount: SortEnumType
    content: SortEnumType
    contextsCount: SortEnumType
    created: SortEnumType
    description: SortEnumType
    end: SortEnumType
    firstActsCount: SortEnumType
    id: SortEnumType
    identity: SortEnumType
    indirectObjectsCount: SortEnumType
    label: SortEnumType
    modified: SortEnumType
    objectsCount: SortEnumType
    parallelsCount: SortEnumType
    propertiesCount: SortEnumType
    purposesCount: SortEnumType
    referencesCount: SortEnumType
    secondActsCount: SortEnumType
    sentence: SortEnumType
    settingsCount: SortEnumType
    start: SortEnumType
    subjectsCount: SortEnumType
    uuid: SortEnumType
}

input ListFilterInputTypeOfContextRelationFilterInput {
    all: ContextRelationFilterInput
    any: Boolean
    none: ContextRelationFilterInput
    some: ContextRelationFilterInput
}

input ListFilterInputTypeOfFirstActRelationFilterInput {
    all: FirstActRelationFilterInput
    any: Boolean
    none: FirstActRelationFilterInput
    some: FirstActRelationFilterInput
}

input ListFilterInputTypeOfIndirectObjectRelationFilterInput {
    all: IndirectObjectRelationFilterInput
    any: Boolean
    none: IndirectObjectRelationFilterInput
    some: IndirectObjectRelationFilterInput
}

input ListFilterInputTypeOfObjectRelationFilterInput {
    all: ObjectRelationFilterInput
    any: Boolean
    none: ObjectRelationFilterInput
    some: ObjectRelationFilterInput
}

input ListFilterInputTypeOfParallelRelationFilterInput {
    all: ParallelRelationFilterInput
    any: Boolean
    none: ParallelRelationFilterInput
    some: ParallelRelationFilterInput
}

input ListFilterInputTypeOfPropertyFilterInput {
    all: PropertyFilterInput
    any: Boolean
    none: PropertyFilterInput
    some: PropertyFilterInput
}

input ListFilterInputTypeOfPurposeRelationFilterInput {
    all: PurposeRelationFilterInput
    any: Boolean
    none: PurposeRelationFilterInput
    some: PurposeRelationFilterInput
}

input ListFilterInputTypeOfReferenceRelationFilterInput {
    all: ReferenceRelationFilterInput
    any: Boolean
    none: ReferenceRelationFilterInput
    some: ReferenceRelationFilterInput
}

input ListFilterInputTypeOfSecondActRelationFilterInput {
    all: SecondActRelationFilterInput
    any: Boolean
    none: SecondActRelationFilterInput
    some: SecondActRelationFilterInput
}

input ListFilterInputTypeOfSettingRelationFilterInput {
    all: SettingRelationFilterInput
    any: Boolean
    none: SettingRelationFilterInput
    some: SettingRelationFilterInput
}

input ListFilterInputTypeOfSubjectRelationFilterInput {
    all: SubjectRelationFilterInput
    any: Boolean
    none: SubjectRelationFilterInput
    some: SubjectRelationFilterInput
}

input ObjectRelationFilterInput {
    and: [ObjectRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt64OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt64OperationFilterInput
    or: [ObjectRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input ParallelRelationFilterInput {
    and: [ParallelRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt64OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt64OperationFilterInput
    or: [ParallelRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input PropertyFilterInput {
    and: [PropertyFilterInput!]
    description: StringOperationFilterInput
    guid: ComparableGuidOperationFilterInput
    id: ComparableInt64OperationFilterInput
    interaction: InteractionFilterInput
    interactionId: ComparableInt64OperationFilterInput
    key: StringOperationFilterInput
    or: [PropertyFilterInput!]
    value: StringOperationFilterInput
}

input PurposeRelationFilterInput {
    and: [PurposeRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt64OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt64OperationFilterInput
    or: [PurposeRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input ReferenceRelationFilterInput {
    and: [ReferenceRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt64OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt64OperationFilterInput
    or: [ReferenceRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input RelationTypesOperationFilterInput {
    eq: RelationTypes
    in: [RelationTypes!]
    neq: RelationTypes
    nin: [RelationTypes!]
}

input RelationWeightOperationFilterInput {
    eq: RelationWeight
    in: [RelationWeight!]
    neq: RelationWeight
    nin: [RelationWeight!]
}

input SecondActRelationFilterInput {
    and: [SecondActRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt64OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt64OperationFilterInput
    or: [SecondActRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input SettingRelationFilterInput {
    and: [SettingRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt64OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt64OperationFilterInput
    or: [SettingRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}

input StringOperationFilterInput {
    and: [StringOperationFilterInput!]
    contains: String
    endsWith: String
    eq: String
    in: [String]
    ncontains: String
    nendsWith: String
    neq: String
    nin: [String]
    nstartsWith: String
    or: [StringOperationFilterInput!]
    startsWith: String
}

input SubjectRelationFilterInput {
    and: [SubjectRelationFilterInput!]
    content: StringOperationFilterInput
    description: StringOperationFilterInput
    hostInteraction: InteractionFilterInput
    hostInteractionId: ComparableInt64OperationFilterInput
    label: StringOperationFilterInput
    linkedInteraction: InteractionFilterInput
    linkedInteractionId: ComparableInt64OperationFilterInput
    or: [SubjectRelationFilterInput!]
    type: RelationTypesOperationFilterInput
    uuid: ComparableNullableOfGuidOperationFilterInput
    weight: RelationWeightOperationFilterInput
}
