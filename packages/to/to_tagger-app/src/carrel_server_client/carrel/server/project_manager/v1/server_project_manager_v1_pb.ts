// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file carrel/server/project_manager/v1/server_project_manager_v1.proto (package carrel.server.project_manager.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, protoInt64} from "@bufbuild/protobuf";
import {AddArchiveDto, ProjectInfo} from "../../../core/project_manager/v1/project_manager_v1_pb.js";
import {File} from "../../../common/file/v1/file_v1_pb.js";
import {Archive} from "../../../common/archive/v1/archive_v1_pb.js";
import {Firefly} from "../../../common/firefly/v2/firefly_v2_pb.js";
import {StandardQuery, StandardQueryResultMetadata} from "../../../../generic/api/query/v1/query_v1_pb.js";
import {Project} from "../../../common/project/v2/project_v2_pb.js";
import {TagGroup, TagKeyValueNote} from "../../../common/tag/v2/tag_v2_pb.js";

/**
 * message to open a project
 *
 * @generated from message carrel.server.project_manager.v1.OpenProjectRequest
 */
export class OpenProjectRequest extends Message<OpenProjectRequest> {
  /**
   * the id of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * app
   *
   * @generated from field: string app_directory = 2;
   */
  appDirectory = "";

  constructor(data?: PartialMessage<OpenProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.OpenProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "app_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OpenProjectRequest {
    return new OpenProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OpenProjectRequest {
    return new OpenProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OpenProjectRequest {
    return new OpenProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OpenProjectRequest | PlainMessage<OpenProjectRequest> | undefined, b: OpenProjectRequest | PlainMessage<OpenProjectRequest> | undefined): boolean {
    return proto3.util.equals(OpenProjectRequest, a, b);
  }
}

/**
 * message to open a project
 *
 * @generated from message carrel.server.project_manager.v1.OpenProjectResponse
 */
export class OpenProjectResponse extends Message<OpenProjectResponse> {
  /**
   * @generated from field: string app_directory = 2;
   */
  appDirectory = "";

  /**
   * @generated from field: string project_directory = 3;
   */
  projectDirectory = "";

  /**
   * @generated from field: carrel.core.project_manager.v1.ProjectInfo project_info = 4;
   */
  projectInfo?: ProjectInfo;

  constructor(data?: PartialMessage<OpenProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.OpenProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "app_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "project_info", kind: "message", T: ProjectInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OpenProjectResponse {
    return new OpenProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OpenProjectResponse {
    return new OpenProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OpenProjectResponse {
    return new OpenProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OpenProjectResponse | PlainMessage<OpenProjectResponse> | undefined, b: OpenProjectResponse | PlainMessage<OpenProjectResponse> | undefined): boolean {
    return proto3.util.equals(OpenProjectResponse, a, b);
  }
}

/**
 * message to get project information
 *
 * @generated from message carrel.server.project_manager.v1.GetProjectInfoRequest
 */
export class GetProjectInfoRequest extends Message<GetProjectInfoRequest> {
  /**
   * the id of the project
   *
   * @generated from field: int32 project_id = 1;
   */
  projectId = 0;

  constructor(data?: PartialMessage<GetProjectInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.GetProjectInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectInfoRequest {
    return new GetProjectInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectInfoRequest {
    return new GetProjectInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectInfoRequest {
    return new GetProjectInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectInfoRequest | PlainMessage<GetProjectInfoRequest> | undefined, b: GetProjectInfoRequest | PlainMessage<GetProjectInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetProjectInfoRequest, a, b);
  }
}

/**
 * message to get project information
 *
 * @generated from message carrel.server.project_manager.v1.GetProjectInfoResponse
 */
export class GetProjectInfoResponse extends Message<GetProjectInfoResponse> {
  /**
   * the id of the project
   *
   * @generated from field: carrel.core.project_manager.v1.ProjectInfo project_info = 1;
   */
  projectInfo?: ProjectInfo;

  constructor(data?: PartialMessage<GetProjectInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.GetProjectInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_info", kind: "message", T: ProjectInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectInfoResponse {
    return new GetProjectInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectInfoResponse {
    return new GetProjectInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectInfoResponse {
    return new GetProjectInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectInfoResponse | PlainMessage<GetProjectInfoResponse> | undefined, b: GetProjectInfoResponse | PlainMessage<GetProjectInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetProjectInfoResponse, a, b);
  }
}

/**
 * message to add archive
 *
 * @generated from message carrel.server.project_manager.v1.AddArchiveRequest
 */
export class AddArchiveRequest extends Message<AddArchiveRequest> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the id of the project
   *
   * @generated from field: int32 project_id = 2;
   */
  projectId = 0;

  /**
   * @generated from field: carrel.core.project_manager.v1.AddArchiveDto add_archive_dto = 3;
   */
  addArchiveDto?: AddArchiveDto;

  constructor(data?: PartialMessage<AddArchiveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.AddArchiveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "add_archive_dto", kind: "message", T: AddArchiveDto },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddArchiveRequest {
    return new AddArchiveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddArchiveRequest {
    return new AddArchiveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddArchiveRequest {
    return new AddArchiveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddArchiveRequest | PlainMessage<AddArchiveRequest> | undefined, b: AddArchiveRequest | PlainMessage<AddArchiveRequest> | undefined): boolean {
    return proto3.util.equals(AddArchiveRequest, a, b);
  }
}

/**
 * message to add archive
 *
 * @generated from message carrel.server.project_manager.v1.AddArchiveResponse
 */
export class AddArchiveResponse extends Message<AddArchiveResponse> {
  /**
   * the folder of the archive
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * db file name
   *
   * @generated from field: string db_file_name = 2;
   */
  dbFileName = "";

  /**
   * the id of the project
   *
   * @generated from field: int32 project_id = 3;
   */
  projectId = 0;

  /**
   * the id of the archive
   *
   * @generated from field: int32 archive_id = 4;
   */
  archiveId = 0;

  constructor(data?: PartialMessage<AddArchiveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.AddArchiveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "db_file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "archive_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddArchiveResponse {
    return new AddArchiveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddArchiveResponse {
    return new AddArchiveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddArchiveResponse {
    return new AddArchiveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddArchiveResponse | PlainMessage<AddArchiveResponse> | undefined, b: AddArchiveResponse | PlainMessage<AddArchiveResponse> | undefined): boolean {
    return proto3.util.equals(AddArchiveResponse, a, b);
  }
}

/**
 * message to get archive files
 *
 * @generated from message carrel.server.project_manager.v1.GetArchiveFilesRequest
 */
export class GetArchiveFilesRequest extends Message<GetArchiveFilesRequest> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the id of the project
   *
   * @generated from field: int32 project_id = 2;
   */
  projectId = 0;

  /**
   * the id of the archive
   *
   * @generated from field: int32 archive_id = 3;
   */
  archiveId = 0;

  constructor(data?: PartialMessage<GetArchiveFilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.GetArchiveFilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "archive_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArchiveFilesRequest {
    return new GetArchiveFilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArchiveFilesRequest {
    return new GetArchiveFilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArchiveFilesRequest {
    return new GetArchiveFilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetArchiveFilesRequest | PlainMessage<GetArchiveFilesRequest> | undefined, b: GetArchiveFilesRequest | PlainMessage<GetArchiveFilesRequest> | undefined): boolean {
    return proto3.util.equals(GetArchiveFilesRequest, a, b);
  }
}

/**
 * message to get archive files
 *
 * @generated from message carrel.server.project_manager.v1.GetArchiveFilesResponse
 */
export class GetArchiveFilesResponse extends Message<GetArchiveFilesResponse> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the id of the project
   *
   * @generated from field: int32 project_id = 2;
   */
  projectId = 0;

  /**
   * the id of the archive
   *
   * @generated from field: int32 archive_id = 3;
   */
  archiveId = 0;

  /**
   * the list of files
   *
   * @generated from field: repeated carrel.common.file.v1.File files = 4;
   */
  files: File[] = [];

  constructor(data?: PartialMessage<GetArchiveFilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.GetArchiveFilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "archive_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "files", kind: "message", T: File, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArchiveFilesResponse {
    return new GetArchiveFilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArchiveFilesResponse {
    return new GetArchiveFilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArchiveFilesResponse {
    return new GetArchiveFilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetArchiveFilesResponse | PlainMessage<GetArchiveFilesResponse> | undefined, b: GetArchiveFilesResponse | PlainMessage<GetArchiveFilesResponse> | undefined): boolean {
    return proto3.util.equals(GetArchiveFilesResponse, a, b);
  }
}

/**
 * message to add files to archive
 *
 * @generated from message carrel.server.project_manager.v1.AddFilesToArchiveRequest
 */
export class AddFilesToArchiveRequest extends Message<AddFilesToArchiveRequest> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the id of the archive
   *
   * @generated from field: int32 archive_id = 3;
   */
  archiveId = 0;

  /**
   * the list of files
   *
   * @generated from field: repeated string file_paths = 4;
   */
  filePaths: string[] = [];

  constructor(data?: PartialMessage<AddFilesToArchiveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.AddFilesToArchiveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "archive_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "file_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddFilesToArchiveRequest {
    return new AddFilesToArchiveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddFilesToArchiveRequest {
    return new AddFilesToArchiveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddFilesToArchiveRequest {
    return new AddFilesToArchiveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddFilesToArchiveRequest | PlainMessage<AddFilesToArchiveRequest> | undefined, b: AddFilesToArchiveRequest | PlainMessage<AddFilesToArchiveRequest> | undefined): boolean {
    return proto3.util.equals(AddFilesToArchiveRequest, a, b);
  }
}

/**
 * message to add files to archive
 *
 * @generated from message carrel.server.project_manager.v1.AddFilesToArchiveResponse
 */
export class AddFilesToArchiveResponse extends Message<AddFilesToArchiveResponse> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the id of the project
   *
   * @generated from field: int32 project_id = 2;
   */
  projectId = 0;

  /**
   * the id of the archive
   *
   * @generated from field: int32 archive_id = 3;
   */
  archiveId = 0;

  /**
   * the list of files
   *
   * @generated from field: repeated carrel.common.file.v1.File files = 4;
   */
  files: File[] = [];

  constructor(data?: PartialMessage<AddFilesToArchiveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.AddFilesToArchiveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "archive_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "files", kind: "message", T: File, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddFilesToArchiveResponse {
    return new AddFilesToArchiveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddFilesToArchiveResponse {
    return new AddFilesToArchiveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddFilesToArchiveResponse {
    return new AddFilesToArchiveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddFilesToArchiveResponse | PlainMessage<AddFilesToArchiveResponse> | undefined, b: AddFilesToArchiveResponse | PlainMessage<AddFilesToArchiveResponse> | undefined): boolean {
    return proto3.util.equals(AddFilesToArchiveResponse, a, b);
  }
}

/**
 * message to add folder files to archive
 *
 * @generated from message carrel.server.project_manager.v1.AddDirectoryToArchiveRequest
 */
export class AddDirectoryToArchiveRequest extends Message<AddDirectoryToArchiveRequest> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the id of the archive
   *
   * @generated from field: int32 archive_id = 3;
   */
  archiveId = 0;

  /**
   * the list of files
   *
   * @generated from field: string source_directory = 4;
   */
  sourceDirectory = "";

  constructor(data?: PartialMessage<AddDirectoryToArchiveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.AddDirectoryToArchiveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "archive_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "source_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddDirectoryToArchiveRequest {
    return new AddDirectoryToArchiveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddDirectoryToArchiveRequest {
    return new AddDirectoryToArchiveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddDirectoryToArchiveRequest {
    return new AddDirectoryToArchiveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddDirectoryToArchiveRequest | PlainMessage<AddDirectoryToArchiveRequest> | undefined, b: AddDirectoryToArchiveRequest | PlainMessage<AddDirectoryToArchiveRequest> | undefined): boolean {
    return proto3.util.equals(AddDirectoryToArchiveRequest, a, b);
  }
}

/**
 * message to add folder files to archive
 *
 * @generated from message carrel.server.project_manager.v1.AddDirectoryToArchiveResponse
 */
export class AddDirectoryToArchiveResponse extends Message<AddDirectoryToArchiveResponse> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the id of the archive
   *
   * @generated from field: int32 archive_id = 3;
   */
  archiveId = 0;

  /**
   * the list of files
   *
   * @generated from field: repeated carrel.common.file.v1.File files = 4;
   */
  files: File[] = [];

  constructor(data?: PartialMessage<AddDirectoryToArchiveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.AddDirectoryToArchiveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "archive_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "files", kind: "message", T: File, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddDirectoryToArchiveResponse {
    return new AddDirectoryToArchiveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddDirectoryToArchiveResponse {
    return new AddDirectoryToArchiveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddDirectoryToArchiveResponse {
    return new AddDirectoryToArchiveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddDirectoryToArchiveResponse | PlainMessage<AddDirectoryToArchiveResponse> | undefined, b: AddDirectoryToArchiveResponse | PlainMessage<AddDirectoryToArchiveResponse> | undefined): boolean {
    return proto3.util.equals(AddDirectoryToArchiveResponse, a, b);
  }
}

/**
 * message to remove files from archive
 *
 * @generated from message carrel.server.project_manager.v1.RemoveFilesFromArchiveRequest
 */
export class RemoveFilesFromArchiveRequest extends Message<RemoveFilesFromArchiveRequest> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the id of the project
   *
   * @generated from field: int32 project_id = 2;
   */
  projectId = 0;

  /**
   * the id of the archive
   *
   * @generated from field: int32 archive_id = 3;
   */
  archiveId = 0;

  /**
   * the list of files
   *
   * @generated from field: repeated string file_uuids = 4;
   */
  fileUuids: string[] = [];

  constructor(data?: PartialMessage<RemoveFilesFromArchiveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.RemoveFilesFromArchiveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "archive_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "file_uuids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveFilesFromArchiveRequest {
    return new RemoveFilesFromArchiveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveFilesFromArchiveRequest {
    return new RemoveFilesFromArchiveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveFilesFromArchiveRequest {
    return new RemoveFilesFromArchiveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveFilesFromArchiveRequest | PlainMessage<RemoveFilesFromArchiveRequest> | undefined, b: RemoveFilesFromArchiveRequest | PlainMessage<RemoveFilesFromArchiveRequest> | undefined): boolean {
    return proto3.util.equals(RemoveFilesFromArchiveRequest, a, b);
  }
}

/**
 * message to remove files from archive
 *
 * @generated from message carrel.server.project_manager.v1.RemoveFilesFromArchiveResponse
 */
export class RemoveFilesFromArchiveResponse extends Message<RemoveFilesFromArchiveResponse> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the id of the project
   *
   * @generated from field: int32 project_id = 2;
   */
  projectId = 0;

  /**
   * the id of the archive
   *
   * @generated from field: int32 archive_id = 3;
   */
  archiveId = 0;

  /**
   * @generated from field: int64 affected_rows = 4;
   */
  affectedRows = protoInt64.zero;

  /**
   * bool when affected rows is 0
   *
   * @generated from field: bool is_affacted_rows_zero = 5;
   */
  isAffactedRowsZero = false;

  constructor(data?: PartialMessage<RemoveFilesFromArchiveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.RemoveFilesFromArchiveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "archive_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "affected_rows", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "is_affacted_rows_zero", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveFilesFromArchiveResponse {
    return new RemoveFilesFromArchiveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveFilesFromArchiveResponse {
    return new RemoveFilesFromArchiveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveFilesFromArchiveResponse {
    return new RemoveFilesFromArchiveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveFilesFromArchiveResponse | PlainMessage<RemoveFilesFromArchiveResponse> | undefined, b: RemoveFilesFromArchiveResponse | PlainMessage<RemoveFilesFromArchiveResponse> | undefined): boolean {
    return proto3.util.equals(RemoveFilesFromArchiveResponse, a, b);
  }
}

/**
 * message to list all project archives
 *
 * @generated from message carrel.server.project_manager.v1.ListAllProjectArchivesRequest
 */
export class ListAllProjectArchivesRequest extends Message<ListAllProjectArchivesRequest> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  constructor(data?: PartialMessage<ListAllProjectArchivesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.ListAllProjectArchivesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllProjectArchivesRequest {
    return new ListAllProjectArchivesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllProjectArchivesRequest {
    return new ListAllProjectArchivesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllProjectArchivesRequest {
    return new ListAllProjectArchivesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllProjectArchivesRequest | PlainMessage<ListAllProjectArchivesRequest> | undefined, b: ListAllProjectArchivesRequest | PlainMessage<ListAllProjectArchivesRequest> | undefined): boolean {
    return proto3.util.equals(ListAllProjectArchivesRequest, a, b);
  }
}

/**
 * message to list all project archives
 *
 * @generated from message carrel.server.project_manager.v1.ListAllProjectArchivesResponse
 */
export class ListAllProjectArchivesResponse extends Message<ListAllProjectArchivesResponse> {
  /**
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the folder of the project
   *
   * the list of archives
   *
   * @generated from field: repeated carrel.common.archive.v1.Archive archives = 3;
   */
  archives: Archive[] = [];

  constructor(data?: PartialMessage<ListAllProjectArchivesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.ListAllProjectArchivesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "archives", kind: "message", T: Archive, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllProjectArchivesResponse {
    return new ListAllProjectArchivesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllProjectArchivesResponse {
    return new ListAllProjectArchivesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllProjectArchivesResponse {
    return new ListAllProjectArchivesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllProjectArchivesResponse | PlainMessage<ListAllProjectArchivesResponse> | undefined, b: ListAllProjectArchivesResponse | PlainMessage<ListAllProjectArchivesResponse> | undefined): boolean {
    return proto3.util.equals(ListAllProjectArchivesResponse, a, b);
  }
}

/**
 * message to list files in archive
 *
 * @generated from message carrel.server.project_manager.v1.ListFilesInArchiveRequest
 */
export class ListFilesInArchiveRequest extends Message<ListFilesInArchiveRequest> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the id of the archive
   *
   * @generated from field: int32 archive_id = 2;
   */
  archiveId = 0;

  constructor(data?: PartialMessage<ListFilesInArchiveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.ListFilesInArchiveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "archive_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFilesInArchiveRequest {
    return new ListFilesInArchiveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFilesInArchiveRequest {
    return new ListFilesInArchiveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFilesInArchiveRequest {
    return new ListFilesInArchiveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFilesInArchiveRequest | PlainMessage<ListFilesInArchiveRequest> | undefined, b: ListFilesInArchiveRequest | PlainMessage<ListFilesInArchiveRequest> | undefined): boolean {
    return proto3.util.equals(ListFilesInArchiveRequest, a, b);
  }
}

/**
 * message to list files in archive
 *
 * @generated from message carrel.server.project_manager.v1.ListFilesInArchiveResponse
 */
export class ListFilesInArchiveResponse extends Message<ListFilesInArchiveResponse> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the id of the archive
   *
   * @generated from field: int32 archive_id = 2;
   */
  archiveId = 0;

  /**
   * the list of files
   *
   * @generated from field: repeated carrel.common.file.v1.File files = 3;
   */
  files: File[] = [];

  constructor(data?: PartialMessage<ListFilesInArchiveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.ListFilesInArchiveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "archive_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "files", kind: "message", T: File, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFilesInArchiveResponse {
    return new ListFilesInArchiveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFilesInArchiveResponse {
    return new ListFilesInArchiveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFilesInArchiveResponse {
    return new ListFilesInArchiveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFilesInArchiveResponse | PlainMessage<ListFilesInArchiveResponse> | undefined, b: ListFilesInArchiveResponse | PlainMessage<ListFilesInArchiveResponse> | undefined): boolean {
    return proto3.util.equals(ListFilesInArchiveResponse, a, b);
  }
}

/**
 * message to sync archive
 *
 * @generated from message carrel.server.project_manager.v1.SyncProjectRequest
 */
export class SyncProjectRequest extends Message<SyncProjectRequest> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the app directory
   *
   * @generated from field: string app_directory = 2;
   */
  appDirectory = "";

  constructor(data?: PartialMessage<SyncProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.SyncProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "app_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncProjectRequest {
    return new SyncProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncProjectRequest {
    return new SyncProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncProjectRequest {
    return new SyncProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyncProjectRequest | PlainMessage<SyncProjectRequest> | undefined, b: SyncProjectRequest | PlainMessage<SyncProjectRequest> | undefined): boolean {
    return proto3.util.equals(SyncProjectRequest, a, b);
  }
}

/**
 * message to sync
 *
 * @generated from message carrel.server.project_manager.v1.SyncProjectResponse
 */
export class SyncProjectResponse extends Message<SyncProjectResponse> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the id of the archive
   *
   * @generated from field: string task_uuid = 2;
   */
  taskUuid = "";

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  constructor(data?: PartialMessage<SyncProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.SyncProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "task_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncProjectResponse {
    return new SyncProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncProjectResponse {
    return new SyncProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncProjectResponse {
    return new SyncProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SyncProjectResponse | PlainMessage<SyncProjectResponse> | undefined, b: SyncProjectResponse | PlainMessage<SyncProjectResponse> | undefined): boolean {
    return proto3.util.equals(SyncProjectResponse, a, b);
  }
}

/**
 * message to list all project files
 *
 * @generated from message carrel.server.project_manager.v1.ListAllProjectFilesRequest
 */
export class ListAllProjectFilesRequest extends Message<ListAllProjectFilesRequest> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  constructor(data?: PartialMessage<ListAllProjectFilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.ListAllProjectFilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllProjectFilesRequest {
    return new ListAllProjectFilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllProjectFilesRequest {
    return new ListAllProjectFilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllProjectFilesRequest {
    return new ListAllProjectFilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllProjectFilesRequest | PlainMessage<ListAllProjectFilesRequest> | undefined, b: ListAllProjectFilesRequest | PlainMessage<ListAllProjectFilesRequest> | undefined): boolean {
    return proto3.util.equals(ListAllProjectFilesRequest, a, b);
  }
}

/**
 * message to list all project files
 *
 * @generated from message carrel.server.project_manager.v1.ListAllProjectFilesResponse
 */
export class ListAllProjectFilesResponse extends Message<ListAllProjectFilesResponse> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the list of files
   *
   * @generated from field: repeated carrel.common.file.v1.File files = 3;
   */
  files: File[] = [];

  constructor(data?: PartialMessage<ListAllProjectFilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.ListAllProjectFilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "files", kind: "message", T: File, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllProjectFilesResponse {
    return new ListAllProjectFilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllProjectFilesResponse {
    return new ListAllProjectFilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllProjectFilesResponse {
    return new ListAllProjectFilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllProjectFilesResponse | PlainMessage<ListAllProjectFilesResponse> | undefined, b: ListAllProjectFilesResponse | PlainMessage<ListAllProjectFilesResponse> | undefined): boolean {
    return proto3.util.equals(ListAllProjectFilesResponse, a, b);
  }
}

/**
 * message to list all project fireflies
 *
 * @generated from message carrel.server.project_manager.v1.ListAllProjectFirefliesRequest
 */
export class ListAllProjectFirefliesRequest extends Message<ListAllProjectFirefliesRequest> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  constructor(data?: PartialMessage<ListAllProjectFirefliesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.ListAllProjectFirefliesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllProjectFirefliesRequest {
    return new ListAllProjectFirefliesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllProjectFirefliesRequest {
    return new ListAllProjectFirefliesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllProjectFirefliesRequest {
    return new ListAllProjectFirefliesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllProjectFirefliesRequest | PlainMessage<ListAllProjectFirefliesRequest> | undefined, b: ListAllProjectFirefliesRequest | PlainMessage<ListAllProjectFirefliesRequest> | undefined): boolean {
    return proto3.util.equals(ListAllProjectFirefliesRequest, a, b);
  }
}

/**
 * message to list all project fireflies
 *
 * @generated from message carrel.server.project_manager.v1.ListAllProjectFirefliesResponse
 */
export class ListAllProjectFirefliesResponse extends Message<ListAllProjectFirefliesResponse> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the list of fireflies
   *
   * @generated from field: repeated carrel.common.firefly.v2.Firefly fireflies = 3;
   */
  fireflies: Firefly[] = [];

  /**
   * count
   *
   * @generated from field: uint64 count = 4;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<ListAllProjectFirefliesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.ListAllProjectFirefliesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fireflies", kind: "message", T: Firefly, repeated: true },
    { no: 4, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllProjectFirefliesResponse {
    return new ListAllProjectFirefliesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllProjectFirefliesResponse {
    return new ListAllProjectFirefliesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllProjectFirefliesResponse {
    return new ListAllProjectFirefliesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllProjectFirefliesResponse | PlainMessage<ListAllProjectFirefliesResponse> | undefined, b: ListAllProjectFirefliesResponse | PlainMessage<ListAllProjectFirefliesResponse> | undefined): boolean {
    return proto3.util.equals(ListAllProjectFirefliesResponse, a, b);
  }
}

/**
 * message to query files
 *
 * @generated from message carrel.server.project_manager.v1.QueryFilesRequest
 */
export class QueryFilesRequest extends Message<QueryFilesRequest> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the query
   *
   * @generated from field: generic.api.query.v1.StandardQuery query = 2;
   */
  query?: StandardQuery;

  /**
   * whether use mock data
   *
   * @generated from field: bool is_mock = 3;
   */
  isMock = false;

  constructor(data?: PartialMessage<QueryFilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.QueryFilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "query", kind: "message", T: StandardQuery },
    { no: 3, name: "is_mock", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFilesRequest {
    return new QueryFilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFilesRequest {
    return new QueryFilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFilesRequest {
    return new QueryFilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFilesRequest | PlainMessage<QueryFilesRequest> | undefined, b: QueryFilesRequest | PlainMessage<QueryFilesRequest> | undefined): boolean {
    return proto3.util.equals(QueryFilesRequest, a, b);
  }
}

/**
 * message that replies to query files request
 *
 * @generated from message carrel.server.project_manager.v1.QueryFilesResponse
 */
export class QueryFilesResponse extends Message<QueryFilesResponse> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the list of files
   *
   * @generated from field: repeated carrel.common.file.v1.File files = 3;
   */
  files: File[] = [];

  /**
   * @generated from field: generic.api.query.v1.StandardQueryResultMetadata response_metadata = 4;
   */
  responseMetadata?: StandardQueryResultMetadata;

  constructor(data?: PartialMessage<QueryFilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.QueryFilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "files", kind: "message", T: File, repeated: true },
    { no: 4, name: "response_metadata", kind: "message", T: StandardQueryResultMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFilesResponse {
    return new QueryFilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFilesResponse {
    return new QueryFilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFilesResponse {
    return new QueryFilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFilesResponse | PlainMessage<QueryFilesResponse> | undefined, b: QueryFilesResponse | PlainMessage<QueryFilesResponse> | undefined): boolean {
    return proto3.util.equals(QueryFilesResponse, a, b);
  }
}

/**
 * message to query fireflies
 *
 * @generated from message carrel.server.project_manager.v1.QueryFirefliesRequest
 */
export class QueryFirefliesRequest extends Message<QueryFirefliesRequest> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the query
   *
   * @generated from field: generic.api.query.v1.StandardQuery query = 2;
   */
  query?: StandardQuery;

  /**
   * whether use mock data
   *
   * @generated from field: bool is_mock = 3;
   */
  isMock = false;

  constructor(data?: PartialMessage<QueryFirefliesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.QueryFirefliesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "query", kind: "message", T: StandardQuery },
    { no: 3, name: "is_mock", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFirefliesRequest {
    return new QueryFirefliesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFirefliesRequest {
    return new QueryFirefliesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFirefliesRequest {
    return new QueryFirefliesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFirefliesRequest | PlainMessage<QueryFirefliesRequest> | undefined, b: QueryFirefliesRequest | PlainMessage<QueryFirefliesRequest> | undefined): boolean {
    return proto3.util.equals(QueryFirefliesRequest, a, b);
  }
}

/**
 * message that replies to query fireflies request
 *
 * @generated from message carrel.server.project_manager.v1.QueryFirefliesResponse
 */
export class QueryFirefliesResponse extends Message<QueryFirefliesResponse> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the list of fireflies
   *
   * @generated from field: repeated carrel.common.firefly.v2.Firefly fireflies = 3;
   */
  fireflies: Firefly[] = [];

  /**
   * @generated from field: generic.api.query.v1.StandardQueryResultMetadata response_metadata = 4;
   */
  responseMetadata?: StandardQueryResultMetadata;

  constructor(data?: PartialMessage<QueryFirefliesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.QueryFirefliesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fireflies", kind: "message", T: Firefly, repeated: true },
    { no: 4, name: "response_metadata", kind: "message", T: StandardQueryResultMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFirefliesResponse {
    return new QueryFirefliesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFirefliesResponse {
    return new QueryFirefliesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFirefliesResponse {
    return new QueryFirefliesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFirefliesResponse | PlainMessage<QueryFirefliesResponse> | undefined, b: QueryFirefliesResponse | PlainMessage<QueryFirefliesResponse> | undefined): boolean {
    return proto3.util.equals(QueryFirefliesResponse, a, b);
  }
}

/**
 * list more recent project request
 *
 * @generated from message carrel.server.project_manager.v1.ListRecentProjectsRequest
 */
export class ListRecentProjectsRequest extends Message<ListRecentProjectsRequest> {
  /**
   * app directory
   *
   * @generated from field: string app_directory = 1;
   */
  appDirectory = "";

  /**
   * number of projects
   *
   * @generated from field: int32 number_of_projects = 2;
   */
  numberOfProjects = 0;

  constructor(data?: PartialMessage<ListRecentProjectsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.ListRecentProjectsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "number_of_projects", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRecentProjectsRequest {
    return new ListRecentProjectsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRecentProjectsRequest {
    return new ListRecentProjectsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRecentProjectsRequest {
    return new ListRecentProjectsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRecentProjectsRequest | PlainMessage<ListRecentProjectsRequest> | undefined, b: ListRecentProjectsRequest | PlainMessage<ListRecentProjectsRequest> | undefined): boolean {
    return proto3.util.equals(ListRecentProjectsRequest, a, b);
  }
}

/**
 * list more recent project response
 *
 * @generated from message carrel.server.project_manager.v1.ListRecentProjectsResponse
 */
export class ListRecentProjectsResponse extends Message<ListRecentProjectsResponse> {
  /**
   * @generated from field: repeated carrel.common.project.v2.Project projects = 1;
   */
  projects: Project[] = [];

  /**
   * @generated from field: string app_directory = 3;
   */
  appDirectory = "";

  constructor(data?: PartialMessage<ListRecentProjectsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.ListRecentProjectsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "message", T: Project, repeated: true },
    { no: 3, name: "app_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRecentProjectsResponse {
    return new ListRecentProjectsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRecentProjectsResponse {
    return new ListRecentProjectsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRecentProjectsResponse {
    return new ListRecentProjectsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRecentProjectsResponse | PlainMessage<ListRecentProjectsResponse> | undefined, b: ListRecentProjectsResponse | PlainMessage<ListRecentProjectsResponse> | undefined): boolean {
    return proto3.util.equals(ListRecentProjectsResponse, a, b);
  }
}

/**
 * list all tag groups
 *
 * @generated from message carrel.server.project_manager.v1.ListAllTagGroupsRequest
 */
export class ListAllTagGroupsRequest extends Message<ListAllTagGroupsRequest> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  constructor(data?: PartialMessage<ListAllTagGroupsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.ListAllTagGroupsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllTagGroupsRequest {
    return new ListAllTagGroupsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllTagGroupsRequest {
    return new ListAllTagGroupsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllTagGroupsRequest {
    return new ListAllTagGroupsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllTagGroupsRequest | PlainMessage<ListAllTagGroupsRequest> | undefined, b: ListAllTagGroupsRequest | PlainMessage<ListAllTagGroupsRequest> | undefined): boolean {
    return proto3.util.equals(ListAllTagGroupsRequest, a, b);
  }
}

/**
 * list all tag groups
 *
 * @generated from message carrel.server.project_manager.v1.ListAllTagGroupsResponse
 */
export class ListAllTagGroupsResponse extends Message<ListAllTagGroupsResponse> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the list of tag groups
   *
   * @generated from field: repeated carrel.common.tag.v2.TagGroup tag_groups = 2;
   */
  tagGroups: TagGroup[] = [];

  /**
   * tag_group count
   *
   * @generated from field: int32 tag_group_count = 3;
   */
  tagGroupCount = 0;

  constructor(data?: PartialMessage<ListAllTagGroupsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.ListAllTagGroupsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tag_groups", kind: "message", T: TagGroup, repeated: true },
    { no: 3, name: "tag_group_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllTagGroupsResponse {
    return new ListAllTagGroupsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllTagGroupsResponse {
    return new ListAllTagGroupsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllTagGroupsResponse {
    return new ListAllTagGroupsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllTagGroupsResponse | PlainMessage<ListAllTagGroupsResponse> | undefined, b: ListAllTagGroupsResponse | PlainMessage<ListAllTagGroupsResponse> | undefined): boolean {
    return proto3.util.equals(ListAllTagGroupsResponse, a, b);
  }
}

/**
 * list tags by tag key and value
 *
 * @generated from message carrel.server.project_manager.v1.ListFirefliesByTagsRequest
 */
export class ListFirefliesByTagsRequest extends Message<ListFirefliesByTagsRequest> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * @generated from field: generic.api.query.v1.StandardQuery query = 2;
   */
  query?: StandardQuery;

  /**
   * selectedTags
   *
   * @generated from field: repeated carrel.common.tag.v2.TagKeyValueNote selected_tags = 3;
   */
  selectedTags: TagKeyValueNote[] = [];

  constructor(data?: PartialMessage<ListFirefliesByTagsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.ListFirefliesByTagsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "query", kind: "message", T: StandardQuery },
    { no: 3, name: "selected_tags", kind: "message", T: TagKeyValueNote, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFirefliesByTagsRequest {
    return new ListFirefliesByTagsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFirefliesByTagsRequest {
    return new ListFirefliesByTagsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFirefliesByTagsRequest {
    return new ListFirefliesByTagsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFirefliesByTagsRequest | PlainMessage<ListFirefliesByTagsRequest> | undefined, b: ListFirefliesByTagsRequest | PlainMessage<ListFirefliesByTagsRequest> | undefined): boolean {
    return proto3.util.equals(ListFirefliesByTagsRequest, a, b);
  }
}

/**
 * list tags by tag key and value
 *
 * @generated from message carrel.server.project_manager.v1.ListFirefliesByTagResponse
 */
export class ListFirefliesByTagResponse extends Message<ListFirefliesByTagResponse> {
  /**
   * the folder of the project
   *
   * @generated from field: string project_directory = 1;
   */
  projectDirectory = "";

  /**
   * the list of tags
   *
   * @generated from field: repeated carrel.common.firefly.v2.Firefly fireflies = 2;
   */
  fireflies: Firefly[] = [];

  /**
   * tag count
   *
   * @generated from field: generic.api.query.v1.StandardQueryResultMetadata response_metadata = 4;
   */
  responseMetadata?: StandardQueryResultMetadata;

  constructor(data?: PartialMessage<ListFirefliesByTagResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "carrel.server.project_manager.v1.ListFirefliesByTagResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fireflies", kind: "message", T: Firefly, repeated: true },
    { no: 4, name: "response_metadata", kind: "message", T: StandardQueryResultMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFirefliesByTagResponse {
    return new ListFirefliesByTagResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFirefliesByTagResponse {
    return new ListFirefliesByTagResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFirefliesByTagResponse {
    return new ListFirefliesByTagResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFirefliesByTagResponse | PlainMessage<ListFirefliesByTagResponse> | undefined, b: ListFirefliesByTagResponse | PlainMessage<ListFirefliesByTagResponse> | undefined): boolean {
    return proto3.util.equals(ListFirefliesByTagResponse, a, b);
  }
}

